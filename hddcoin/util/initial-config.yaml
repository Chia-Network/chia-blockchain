min_mainnet_k_size: 32

# Send a ping to all peers after ping_interval seconds
ping_interval: 120
self_hostname: &self_hostname "localhost"
daemon_port: 25400
inbound_rate_limit_percent: 100
outbound_rate_limit_percent: 30

network_overrides: &network_overrides
  constants:
    mainnet:
      NETWORK_TYPE: 0
      GENESIS_CHALLENGE: f663a54192e4fc8832d62c5f914d1c3a15dd2a519c3ca23609a508f4641da23e
      GENESIS_PRE_FARM_POOL_PUZZLE_HASH: "5ed49df42106663947059a3323da310f24c804c6cf7420f3c1ac0cffb3f9d2b3"
      GENESIS_PRE_FARM_FARMER_PUZZLE_HASH: "5ed49df42106663947059a3323da310f24c804c6cf7420f3c1ac0cffb3f9d2b3"
    testnet:
      MIN_PLOT_SIZE: 18
      GENESIS_CHALLENGE: 9613e9ffe2797bf93ff722b5950022471f6ea625e512bd8b1299e4332512be30 
      NETWORK_TYPE: 1
      GENESIS_PRE_FARM_POOL_PUZZLE_HASH: "8bc5671150311938a9f90bfee18ddecc29b65378a40bd5246ef96b4a7ec03c14"
      GENESIS_PRE_FARM_FARMER_PUZZLE_HASH: "8bc5671150311938a9f90bfee18ddecc29b65378a40bd5246ef96b4a7ec03c14"
  config:
    mainnet:
      address_prefix: "hdd"
      default_full_node_port: 28444
    testnet1:
      address_prefix: "thdd"
      default_full_node_port: 38444
    testnet2:
      address_prefix: "thdd"
      default_full_node_port: 48444

selected_network: &selected_network "mainnet"
ALERTS_URL: https://download.hddcoin.org/notify/mainnet_alert.txt
HDDCOIN_ALERTS_PUBKEY: 89b7fd87cb56e926ecefb879a29aae308be01f31980569f6a75a69d2a9a69daefd71fb778d865f7c50d6c967e3025937

# public ssl ca is included in source code
# Private ssl ca is used for trusted connections between machines user owns
private_ssl_ca:
  crt: "config/ssl/ca/private_ca.crt"
  key: "config/ssl/ca/private_ca.key"

hddcoin_ssl_ca:
  crt: "config/ssl/ca/hddcoin_ca.crt"
  key: "config/ssl/ca/hddcoin_ca.key"


daemon_ssl:
  private_crt: "config/ssl/daemon/private_daemon.crt"
  private_key: "config/ssl/daemon/private_daemon.key"


# Controls logging of all servers (harvester, farmer, etc..). Each one can be overriden.
logging: &logging
  log_stdout: False  # If True, outputs to stdout instead of a file
  log_filename: "log/debug.log"
  log_level: "INFO"  # Can be CRITICAL, ERROR, WARNING, INFO, DEBUG, NOTSET
  log_maxfilesrotation: 7 #  Max files in rotation. Default value 7 if the key is not set
  log_syslog: False  # If True, outputs to SysLog host and port specified
  log_syslog_host: "localhost"  # Send logging messages to a remote or local Unix syslog
  log_syslog_port: 514  # UDP port of the remote or local Unix syslog

harvester:
  # The harvester server (if run) will run on this port
  port: 28448
  farmer_peer:
    host: *self_hostname
    port: 28447

  # If True, starts an RPC server at the following port
  start_rpc_server: True
  rpc_port: 28560
  num_threads: 30
  plot_loading_frequency_seconds: 120

  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  # Plots are searched for in the following directories
  plot_directories: []

  ssl:
    private_crt:  "config/ssl/harvester/private_harvester.crt"
    private_key:  "config/ssl/harvester/private_harvester.key"

  private_ssl_ca:
    crt: "config/ssl/ca/private_ca.crt"
    key: "config/ssl/ca/private_ca.key"

  hddcoin_ssl_ca:
    crt: "config/ssl/ca/hddcoin_ca.crt"
    key: "config/ssl/ca/hddcoin_ca.key"

pool:
  # Replace this with a real puzzle hash
  # hdd_target_address: thdd102gkhhzs60grx7cfnpng5n6rjecr89r86l5s8xux2za8k820cxsq64ssdg
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network


farmer:
  # The farmer server (if run) will run on this port
  port: 28447
  # The farmer will attempt to connect to this full node and harvester
  full_node_peer:
    host: *self_hostname
    port: 28444
  harvester_peer:
    host: *self_hostname
    port: 28448

  pool_public_keys: []

  # Replace this with a real puzzle hash
  # hdd_target_address: thdd102gkhhzs60grx7cfnpng5n6rjecr89r86l5s8xux2za8k820cxsq64ssdg

  # If True, starts an RPC server at the following port
  start_rpc_server: True
  rpc_port: 28559

  # To send a share to a pool, a proof of space must have required_iters less than this number
  pool_share_threshold: 1000
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    private_crt:  "config/ssl/farmer/private_farmer.crt"
    private_key:  "config/ssl/farmer/private_farmer.key"
    public_crt:  "config/ssl/farmer/public_farmer.crt"
    public_key:  "config/ssl/farmer/public_farmer.key"

# Don't run this unless you want to run VDF clients on the local machine.
timelord_launcher:
  # The server where the VDF clients will connect to.
  port: 28000
  # Number of VDF client processes to keep alive in the local machine.
  process_count: 3
  logging: *logging


timelord:
  # The timelord server (if run) will run on this port
  port: 28446
  # Provides a list of VDF clients expected to connect to this timelord.
  # For each client, an IP is provided, together with the estimated iterations per second.
  vdf_clients:
    ip:
      - *self_hostname
      - localhost
      - 127.0.0.1
    ips_estimate:
      - 150000
  full_node_peer:
      host: *self_hostname
      port: 28444
  # Maximum number of seconds allowed for a client to reconnect to the server.
  max_connection_time: 60
  # The ip and port where the TCP clients will connect.
  vdf_server:
    host: *self_hostname
    port: 28000
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network
  # fast_algorithm is a faster proof generation algorithm. This speed increase
  # requires much less memory usage and a does not have the risk of OOM that
  # the normal timelord has but requires significantly more cores doing
  # parrallel proof generation and creates a larger and slower to verify
  # resulting proof.
  # An Intel Core i9-10900K can run 2 normal vdf_clients at ~221,000 ips
  # without slowing down but running more than 1 with fast_algorithm will
  # run each vdf_client slower.
  fast_algorithm: False
  # Bluebox (sanatizing Timelord):
  # If set 'True', the timelord will create compact proofs of time, instead of
  # extending the chain. The attribute 'fast_algorithm' won't apply if timelord
  # is running in sanitizer_mode.
  # You must set 'send_uncompact_interval' in 'full_node' > 0 in the full_node
  # section below to have full_node send existing time proofs to be sanitized.
  sanitizer_mode: False

  ssl:
    private_crt:  "config/ssl/timelord/private_timelord.crt"
    private_key:  "config/ssl/timelord/private_timelord.key"
    public_crt:  "config/ssl/timelord/public_timelord.crt"
    public_key:  "config/ssl/timelord/public_timelord.key"

full_node:
  # The full node server (if run) will run on this port
  port: 28444

  # Run multiple nodes with different databases by changing the database_path
  database_path: db/blockchain_v1_CHALLENGE.sqlite
  peer_db_path: db/peer_table_node.sqlite
  simulator_database_path: sim_db/simulator_blockchain_v1_CHALLENGE.sqlite
  simulator_peer_db_path: sim_db/peer_table_node.sqlite

  # If True, starts an RPC server at the following port
  start_rpc_server: True
  rpc_port: 28555

  # Use UPnP to attempt to allow other full nodes to reach your node behind a gateway
  enable_upnp: True

  # If node is more than these blocks behind, will do a sync (long sync)
  sync_blocks_behind_threshold: 300

  # If node is more than these blocks behind, will do a short batch-sync, if it's less, will do a backtrack sync
  short_sync_blocks_behind_threshold: 20

  # How often to initiate outbound connections to other full nodes.
  peer_connect_interval: 30
  # Accept peers until this number of connections
  target_peer_count: 80
  # Initiate outbound connections until this number is hit.
  target_outbound_peer_count: 8
  # IPv4/IPv6 network addresses and CIDR blocks allowed to connect even when target_peer_count has been hit.
  # exempt_peer_networks: ["192.168.0.3", "192.168.1.0/24", "fe80::/10", "2606:4700:4700::64/128"]
  exempt_peer_networks: []
  # Accept at most # of inbound connections for different node types.
  max_inbound_wallet: 20
  max_inbound_farmer: 10
  max_inbound_timelord: 5
  # Only connect to peers who we have heard about in the last recent_peer_threshold seconds
  recent_peer_threshold: 6000

  # Send to a Bluebox (sanatizing timelord) uncompact blocks once every
  # 'send_uncompact_interval' seconds. Set to 0 if you don't use this feature.
  send_uncompact_interval: 0
  # At every 'send_uncompact_interval' seconds, send blueboxes 'target_uncompact_proofs' proofs to be normalized.
  target_uncompact_proofs: 100
  # Setting this flag as True, blueboxes will sanitize only data needed in weight proof calculation, as opposed to whole blocks.
  # Default is set to False, as the network needs only one or two blueboxes like this.
  sanitize_weight_proof_only: False
  # timeout for weight proof request
  weight_proof_timeout: 360

  # when enabled, the full node will print a pstats profile to the root_dir/profile every second
  # analyze with hddcoin/utils/profiler.py
  enable_profiler: False

  # List of trusted DNS seeders to bootstrap from.
  # If you modify this, please change the hardcode as well from FullNode.set_server()
  dns_servers:
    - "dns-introducer.hddcoin.org"
  farmer_peer:
      host: *self_hostname
      port: 28447
  timelord_peer:
      host: *self_hostname
      port: 28446
  introducer_peer:
      host: introducer.hddcoin.org  # HDDcoin introducer IPv4/IPv6
      port: 28444
  wallet_peer:
    host: *self_hostname
    port: 28449
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    private_crt:  "config/ssl/full_node/private_full_node.crt"
    private_key:  "config/ssl/full_node/private_full_node.key"
    public_crt:  "config/ssl/full_node/public_full_node.crt"
    public_key:  "config/ssl/full_node/public_full_node.key"

ui:
   # The ui node server (if run) will run on this port
  port: 28222

  # Which port to use to communicate with the full node
  rpc_port: 28555

  # This SSH key is for the ui SSH server
  ssh_filename: config/ssh_host_key
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  # this is where the electron UI will find its daemon
  # defaults to the one running locally with its private keys
  daemon_host: *self_hostname
  daemon_port: 25400
  daemon_ssl:
    private_crt: config/ssl/daemon/private_daemon.crt
    private_key: config/ssl/daemon/private_daemon.key

introducer:
  host: *self_hostname
  port: 28445
  max_peers_to_send: 20
  # The introducer will only return peers who it has seen in the last
  # recent_peer_threshold seconds
  recent_peer_threshold: 6000
  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  ssl:
    public_crt:  "config/ssl/full_node/public_full_node.crt"
    public_key:  "config/ssl/full_node/public_full_node.key"

wallet:
  port: 28449
  rpc_port: 29256

  enable_profiler: False

  # The minimum height that we care about for our transactions. Set to zero
  # If we are restoring from private key and don't know the height.
  starting_height: 0
  start_height_buffer: 100  # Wallet will stop fly sync at starting_height - buffer
  num_sync_batches: 50
  initial_num_public_keys: 100
  initial_num_public_keys_new_wallet: 5

  full_node_peer:
    host: *self_hostname
    port: 28444

  testing: False
  database_path: wallet/db/blockchain_wallet_v1_CHALLENGE_KEY.sqlite
  wallet_peers_path: wallet/db/wallet_peers.sqlite

  logging: *logging
  network_overrides: *network_overrides
  selected_network: *selected_network

  target_peer_count: 5
  peer_connect_interval: 60
  # The introducer will only return peers who it has seen in the last
  # recent_peer_threshold seconds
  recent_peer_threshold: 6000

  introducer_peer:
    host: introducer.hddcoin.org # HDDcoin AWS introducer IPv4/IPv6
    port: 28444

  ssl:
    private_crt:  "config/ssl/wallet/private_wallet.crt"
    private_key:  "config/ssl/wallet/private_wallet.key"
    public_crt:  "config/ssl/wallet/public_wallet.crt"
    public_key:  "config/ssl/wallet/public_wallet.key"

  trusted_peers:
    trusted_node_1: "config/ssl/full_node/public_full_node.crt"

  short_sync_blocks_behind_threshold: 20
