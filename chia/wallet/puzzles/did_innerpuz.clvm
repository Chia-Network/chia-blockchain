(mod
  (
  MY_PUBKEY
  RECOVERY_DID_LIST_HASH
  NUM_VERIFICATIONS_REQUIRED
  Truths
  mode
  amount
  message
  new_inner_puzhash
  parent_innerpuzhash_amounts_for_recovery_ids
  pubkey
  recovery_list_reveal
  )
  ;message is the new puzzle in the recovery and standard spend cases

  ;MOD_HASH, MY_PUBKEY, RECOVERY_DID_LIST_HASH are curried into the puzzle
  ;EXAMPLE SOLUTION (0xcafef00d 0x12341234 0x923bf9a7856b19d335a65f12d68957d497e1f0c16c0e14baf6d120e60753a1ce 2 1 100 (q "source code") 0xdeadbeef 0xcafef00d ((0xdadadada 0xdad5dad5 200) () (0xfafafafa 0xfaf5faf5 200)) 0xfadeddab (0x22222222 0x33333333 0x44444444))

  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)
  (include singleton_truths.clib)

  (defun is-in-list (atom items)
    ;; returns 1 iff `atom` is in the list of `items`
    (if items
      (if (= atom (f items))
        1
        (is-in-list atom (r items))
      )
      0
    )
  )

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
      (if (l TREE)
          (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
          (sha256 1 TREE)
      )
  )

  ;recovery message module - gets values curried in to make the puzzle
  ;TODO - this should probably be imported
  (defun make_message_puzzle (recovering_coin newpuz pubkey)
    (qq (q . (((unquote CREATE_COIN_ANNOUNCEMENT) (unquote recovering_coin)) ((unquote AGG_SIG_UNSAFE) (unquote pubkey) (unquote newpuz)))))
  )

  (defun-inline create_consume_message (coin_id my_id new_innerpuz pubkey)
    (list ASSERT_COIN_ANNOUNCEMENT (sha256 (sha256 coin_id (sha256tree1 (make_message_puzzle my_id new_innerpuz pubkey))) my_id))
  )

(defun-inline create_coin_ID_for_recovery (MOD_HASH LAUNCHER_ID LAUNCHER_PUZZLE_HASH parent innerpuzhash amount)
    (sha256 parent (calculate_full_puzzle_hash MOD_HASH LAUNCHER_ID LAUNCHER_PUZZLE_HASH innerpuzhash) amount)
  )

  ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
  ; puzzle-hash-of-curried-function is imported from curry-and-treehash.clinc
  (defun-inline calculate_full_puzzle_hash (MOD_HASH LAUNCHER_ID LAUNCHER_PUZZLE_HASH inner_puzzle_hash)
     (puzzle-hash-of-curried-function MOD_HASH inner_puzzle_hash (sha256 1 LAUNCHER_PUZZLE_HASH) (sha256 1 LAUNCHER_ID) (sha256 1 MOD_HASH))
  )

  (defmacro create_new_coin (amount new_puz)
    (qq (c CREATE_COIN (c (unquote new_puz) (c (unquote amount) ()))))
  )

  (defun check_messages_from_identities (MOD_HASH LAUNCHER_PUZZLE_HASH num_verifications_required identities my_id output new_puz parent_innerpuzhash_amounts_for_recovery_ids pubkey num_verifications)
    (if identities
      (if (f parent_innerpuzhash_amounts_for_recovery_ids)
        (check_messages_from_identities
          MOD_HASH
          LAUNCHER_PUZZLE_HASH
          num_verifications_required
          (r identities)
          my_id
          (c
            (create_consume_message
              ; create coin_id from DID
              (create_coin_ID_for_recovery
                MOD_HASH
                (f identities)
                LAUNCHER_PUZZLE_HASH
                (f (f parent_innerpuzhash_amounts_for_recovery_ids))
                (f (r (f parent_innerpuzhash_amounts_for_recovery_ids)))
                (f (r (r (f parent_innerpuzhash_amounts_for_recovery_ids)))))
              my_id
              new_puz
              pubkey)
            output)
          new_puz
          (r parent_innerpuzhash_amounts_for_recovery_ids)
          pubkey
          (+ num_verifications 1)
        )
        (check_messages_from_identities
          MOD_HASH
          LAUNCHER_PUZZLE_HASH
          (r identities)
          my_id
          output
          new_puz
          (r parent_innerpuzhash_amounts_for_recovery_ids)
          pubkey
          num_verifications
        )
      )
      ;if we're out of identites to check for, return our output
      (if (> num_verifications num_verifications_required)
        (c (list AGG_SIG_UNSAFE pubkey new_puz) output)
        (if (= num_verifications num_verifications_required)
          (c (list AGG_SIG_UNSAFE pubkey new_puz) output)
          (x "not enough verifications")
        )
      )
    )
  )

  (defun create_messages (messages)
    (if messages
      (c (list CREATE_COIN (f messages) 0) (create_messages (r messages)))
      ()
    )
  )

  ;Spend modes:
  ;0 = exit spend
  ;1 = create messages and recreate singleton
  ;2 = recovery

  ;MAIN

  (if mode
    (if (= mode 1)
      ; mode one - create messages and recreate singleton
      (c (list CREATE_COIN new_inner_puzhash amount) (c (list AGG_SIG_ME MY_PUBKEY (sha256tree1 (list new_inner_puzhash amount message))) (create_messages message)))
    ; mode two - recovery
    ; check that recovery list is not empty
      (if recovery_list_reveal
        (if (= (sha256tree1 recovery_list_reveal) RECOVERY_DID_LIST_HASH)
          (check_messages_from_identities (singleton_mod_hash_truth Truths) (singleton_launcher_puzzle_hash_truth Truths) NUM_VERIFICATIONS_REQUIRED recovery_list_reveal (my_id_truth Truths) (list (create_new_coin amount message)) message parent_innerpuzhash_amounts_for_recovery_ids pubkey 0)
          (x)
        )
        (x)
      )
    )
    ; mode zero - exit spend
    (list (list CREATE_COIN 0x00 -113) (list CREATE_COIN message amount) (list AGG_SIG_ME MY_PUBKEY (sha256tree1 (list amount message))))
  )

)
