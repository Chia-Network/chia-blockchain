; This is a persistent timer for a proposal which allows it to have a relative time that survives despite it being recreated.
; It has a curried TIMELOCK, which is applied as a ASSERT_HEIGHT_RELATIVE
; It creates/asserts announcements to pair it with the finishing spend of a proposal

(mod (
    DIVIDEND_MOD_HASH
    DIVIDEND_TIMER_MOD_HASH
    CAT_MOD_HASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    TIMELOCK
    MY_PARENT_SINGLETON_STRUCT
    TREASURY_ID

  )
  (include condition_codes.clib)
  (include curry-and-treehash.clib)
  (include *standard-cl-21*)

  ; TODO: THIS FILE IS NOT FINISHED

  (defun calculate_singleton_puzzle_hash (PROPOSAL_SINGLETON_STRUCT inner_puzzle_hash)
    (puzzle-hash-of-curried-function (f PROPOSAL_SINGLETON_STRUCT)
      inner_puzzle_hash
      (sha256tree PROPOSAL_SINGLETON_STRUCT)
    )
  )

  (defun calculate_dividend_puzzlehash (
      PROPOSAL_SINGLETON_STRUCT
      PROPOSAL_MOD_HASH
      PROPOSAL_TIMER_MOD_HASH
      CAT_MOD_HASH
      CAT_TAIL
      CURRENT_CAT_ISSUANCE
      PROPOSAL_PASS_PERCENTAGE
      TREASURY_ID
      PROPOSAL_TIMELOCK
      proposal_current_votes
      proposal_total_votes
      proposal_innerpuzhash
    )
    (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
      proposal_innerpuzhash
      (sha256 ONE proposal_total_votes)
      (sha256 ONE proposal_current_votes)
      (sha256 ONE PROPOSAL_TIMELOCK)
      (sha256 ONE TREASURY_ID)
      (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
      (sha256 ONE CURRENT_CAT_ISSUANCE)
      (sha256 ONE CAT_TAIL)
      (sha256 ONE CAT_MOD_HASH)
      (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
      (sha256 ONE PROPOSAL_MOD_HASH)
      (sha256tree PROPOSAL_SINGLETON_STRUCT)
    )
  )

  ; saves the calculated proposal puzzlehash to use in two conditions rather than calculating it twice
  (defun generate_proposal_conditions (TREASURY_ID dividend_puzzlehash proposal_parent_id proposal_amount)
    (list
      (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 dividend_puzzlehash TREASURY_ID))
      (list ASSERT_MY_PARENT_ID (calculate_coin_id proposal_parent_id dividend_puzzlehash proposal_amount))
    )
  )


  ; main
  (c
    (list ASSERT_HEIGHT_RELATIVE PROPOSAL_TIMELOCK)
    (c
      (list CREATE_PUZZLE_ANNOUNCEMENT (f (r MY_PARENT_SINGLETON_STRUCT)))
      (generate_proposal_conditions
        TREASURY_ID
        (calculate_singleton_puzzle_hash MY_PARENT_SINGLETON_STRUCT
          (calculate_dividend_puzzlehash
            MY_PARENT_SINGLETON_STRUCT
            PROPOSAL_MOD_HASH
            PROPOSAL_TIMER_MOD_HASH
            CAT_MOD_HASH
            CAT_TAIL
            CURRENT_CAT_ISSUANCE
            PROPOSAL_PASS_PERCENTAGE
            TREASURY_ID
            PROPOSAL_TIMELOCK
            proposal_current_votes
            proposal_total_votes
            proposal_innerpuzhash
          )
        )
        proposal_parent_id
        proposal_amount
      )
    )
  )
)
