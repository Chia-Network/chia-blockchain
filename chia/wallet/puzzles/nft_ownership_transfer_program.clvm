(mod
    (
        ; SINGLETON_STRUCT is ((SINGLETON_MOD_HASH, (SINGLETON_LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))
        SINGLETON_STRUCT
        ; CURRY_PARAMS are: (ROYALTY_ADDRESS TRADE_PRICE_PERCENTAGE SETTLEMENT_MOD_HASH CAT_MOD_HASH)
        CURRY_PARAMS
        ; DID of the current owner
        CURRENT_OWNER
        ; Royalty program puzzle hash
        ROYALTY_PROG_PUZHASH
        ; DID inner puzzle hash of the current owner
        current_did_puzhash
        ; New NFT owner's DID
        new_owner
        ; DID inner puzzle hash of the new owner
        new_did_puzhash
        ; trade_prices_list is a list of (amount type) pairs
        ; type 0 is standard chia
        ; any other type is a bytes32 mod hash of a launcher
        trade_prices_list
    )

    (include condition_codes.clvm)
    (include curry-and-treehash.clinc)
    (include sha256tree.clib)
    (defconstant CHANGE_OWNERSHIP -22)
    (defconstant TEN_THOUSAND 10000)

    ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
    ; puzzle-hash-of-curried-function is imported from curry-and-treehash.clinc
    (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
       (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
                                        inner_puzzle_hash
                                        (sha256tree SINGLETON_STRUCT)
       )
    )

    ; Given a singleton ID, generate the singleton struct
    (defun-inline get_singleton_struct (SINGLETON_STRUCT singleton_id)
        (c (f SINGLETON_STRUCT) (c singleton_id (r (r SINGLETON_STRUCT))))
    )

    (defun-inline cat_settlement_puzzle_hash (CAT_MOD_HASH tail_hash SETTLEMENT_MOD_HASH)
        (puzzle-hash-of-curried-function CAT_MOD_HASH
            SETTLEMENT_MOD_HASH
            (sha256 1 tail_hash)
            (sha256 1 CAT_MOD_HASH)
        )
    )

    (defun round_down_to_even (value)
        (if (logand value 1) (- value 1) value)
    )

    (defun-inline calculate_percentage (amount percentage)
        (f (divmod (* amount percentage) TEN_THOUSAND))
    )

    ; Loop of the trade prices list and either assert a puzzle announcement or generate xch
    (defun parse_trade_prices_list ((ROYALTY_ADDRESS TRADE_PRICE_PERCENTAGE SETTLEMENT_MOD_HASH CAT_MOD_HASH) trade_prices_list my_nft_id)
        (if trade_prices_list
            (c
                (if (r (f trade_prices_list))
                    (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (cat_settlement_puzzle_hash CAT_MOD_HASH (f (r (f trade_prices_list))) SETTLEMENT_MOD_HASH) (sha256tree (c my_nft_id (list (list ROYALTY_ADDRESS (calculate_percentage (f (f trade_prices_list)) TRADE_PRICE_PERCENTAGE)))))))
                    (list CREATE_COIN ROYALTY_ADDRESS (round_down_to_even (calculate_percentage (f (f trade_prices_list)) TRADE_PRICE_PERCENTAGE)))
                )
                (parse_trade_prices_list (list ROYALTY_ADDRESS TRADE_PRICE_PERCENTAGE SETTLEMENT_MOD_HASH CAT_MOD_HASH) (r trade_prices_list) my_nft_id)
            )
            ()
        )
    )

    ; main
    (list
        (c (list CHANGE_OWNERSHIP new_owner)
            (c (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash (get_singleton_struct SINGLETON_STRUCT CURRENT_OWNER) current_did_puzhash) (f (r SINGLETON_STRUCT)) (sha256tree royalty_prog_solution) new_owner))
                (c (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash (get_singleton_struct SINGLETON_STRUCT new_owner) new_did_puzhash) (f (r SINGLETON_STRUCT)) (sha256tree royalty_prog_solution)))
                    (parse_trade_prices_list CURRY_PARAMS trade_prices_list (f (r SINGLETON_STRUCT)))
                )
            )
        )
    )
)
