; This is an innerpuz inside a DAO CAT, or any CAT, or even any coin, which locks it up until a payment gets made

(mod (
    INPUT_RATIO_INT  ; the default here is 1 - meaning for one chia input you get exactly the OUTPUT_RATIO_INT output
    OUTPUT_RATIO_INT  ; the default here is 1 - meaning for one output you must pay exactly the INPUT_RATIO_INT as input
    ; IMPORTANT NOTE: this does not implicitly take into account the 1:1000 Chia/CAT conversation that the UI uses
    SETTLEMENT_PAYMENTS_PUZHASH  ; a notarized coin payment is `(nonce . ((puzzle_hash amount ...) (puzzle_hash amount ...) ...))`
    ; here we will use this coin's ID as the nonce to prevent someone from claiming multiple buy ins at once
    BUY_IN_PAYMENT_ADDRESS  ; this is the address we check that a payment has been made to before paying out
    ; for the DAO we curry the p2_singleton with the DAO Treasury ID in the wallet and then curry that here
    new_puzhash  ; this is secured by creating an announcement here which must be asserted elsewhere
    ; ^ probably by the puzzle that creates the settlement. Where that, the settlement, and this are spent together.
    payment_amount  ; secured in the same announcement as above
    my_coin_id
    my_puzhash
    my_amount
  )
  (include condition_codes.clib)
  (include curry-and-treehash.clib)
  (include *standard-cl-21*)

  (defconstant TEN_THOUSAND 10000)

  ; TODO: optimise out the repeated divmod - apparently it costs 1116	(third most expensive op)
  (defun calculate_output (INPUT_RATIO_INT OUTPUT_RATIO_INT payment_amount)
    (+
      (* (f (divmod payment_amount INPUT_RATIO_INT)) OUTPUT_RATIO_INT)
      (calculate_percentage output (f (divmod (* (r (divmod payment_amount INPUT_RATIO_INT)) TEN_THOUSAND) INPUT_RATIO_INT)))
    )
  )

  (defun-inline calculate_percentage (amount percentage)
    (f (divmod (* amount percentage) TEN_THOUSAND))
  )

  (defun create_outputs (my_puzhash new_puzhash my_amount calculated_output)
    (list
      (list CREATE_COIN my_puzhash (- my_amount calculate_output))
      (list CREATE_COIN new_puzhash calculated_output)
    )
  )

  (c
    (list
      ASSERT_PUZZLE_ANNOUNCEMENT
      (sha256
        SETTLEMENT_PAYMENTS_PUZHASH
        (sha256tree
          (c
            my_coin_id
            (list (list BUY_IN_PAYMENT_ADDRESS payment_amount))
          )
        )
      )
    )
    (c
      (list CREATE_COIN_ANNOUNCEMENT (sha256tree (c new_puzhash payment_amount)))
      (c
        (list ASSERT_MY_ID my_coin_id)
        (c
          (list ASSERT_MY_PUZZLEHASH my_puzhash)
          (c
            (list ASSERT_MY_AMOUNT my_amount)
            (create_outputs my_puzhash new_puzhash my_amount (calculate_output INPUT_RATIO_INT OUTPUT_RATIO_INT payment_amount))
          )
        )

      )
    )
  )
)
