(
  ;; The code below is used to calculate of the tree hash of a curried function
  ;; without actually doing the curry, and using other optimization tricks
  ;; like unrolling `sha256tree`.

  (defconstant ONE 1)
  (defconstant TWO 2)
  (defconstant A_KW #a)
  (defconstant Q_KW #q)
  (defconstant C_KW #c)
  (defconstant sha256_one 0x4bf5122f344554c53bde2ebb8cd2b7e3d1600ad631c385a5d7cce23c7785459a)
  (defconstant two_sha256_one_cw_kw 0x02a8d5dd63fba471ebcb1f3e8f7c1e1879b7152a6e7298a91ce119a63400ade7c5)
  (defconstant two_sha256_one_aw_kw 0x02a12871fee210fb8619291eaea194581cbd2531e4b23759d225f6806923f63222)
  (defconstant sha256_one_one 0x9dcf97a184f32623d11a73124ceb99a5709b083721e878a16d78f596718ba7b2)

  ;; this returns the sha256 tree hash of expression F = `((q . a1) a2)`
  (defun hash-expression-F (a1 a2)
         (sha256 TWO (sha256 TWO sha256_one_one a1)
                 (sha256 TWO a2 sha256_one))
  )

  ;; Given the tree hash `environment-hash` of an environment tree E
  ;; and the tree hash `parameter-hash` of a constant parameter P
  ;; return the tree hash of the tree corresponding to
  ;; `(c (q . P) E)`
  ;; This is the new environment tree with the addition parameter P curried in.
  ;;
  ;; Note that `(c (q . P) E)` = `(c . ((q . P) . (E . 0)))`

  (defun-inline update-hash-for-parameter-hash (parameter-hash environment-hash)
     (sha256 two_sha256_one_cw_kw (hash-expression-F parameter-hash environment-hash))
  )

  ;; Given the tree hash `environment-hash` of an environment tree E
  ;; and the tree hash `mod-hash` of a mod M
  ;; return the tree hash of the tree corresponding to
  ;; `(a (q . M) E)`
  ;; This is the hash of a new function that adopts the new environment E.
  ;; This is used to build of the tree hash of a curried function.
  ;;
  ;; Note that `(a (q . M) E)` = `(a . ((q . M)  . (E . 0)))`

  (defun-inline tree-hash-of-apply (mod-hash environment-hash)
     (sha256 two_sha256_one_aw_kw (hash-expression-F mod-hash environment-hash))
  )

  ;; This function recursively calls `update-hash-for-parameter-hash`

  (defun calculate-hash-of-curried-parameters (curry-parameter-hashes)
     (if curry-parameter-hashes
      (update-hash-for-parameter-hash (f curry-parameter-hashes) (calculate-hash-of-curried-parameters (r curry-parameter-hashes)))
      sha256_one_one
     )
  )

  ;; mod-hash:
  ;;   the hash of a puzzle function, ie. a `mod`
  ;;
  ;; curry-parameter-hashes:
  ;;   a list of pre-hashed trees representing parameters to be curried into the puzzle.
  ;;
  ;; we return the hash of the curried expression
  ;;   (a (q . mod-hash) (c (cp1 (c cp2 (c ... 1)...))))
  ;;
  ;; Note that from a user's perspective the hashes passed in here aren't simply
  ;; the hashes of the desired parameters, but their treehash representation since
  ;; that's the form we're assuming they take in the acutal curried program.

  (defun curry (mod-hash . curry-parameter-hashes)
     (tree-hash-of-apply mod-hash
                         (calculate-hash-of-curried-parameters curry-parameter-hashes))
  )

  (defun curry2 (mod-hash curry-parameter-hashes)
     (tree-hash-of-apply mod-hash
                         (calculate-hash-of-curried-parameters curry-parameter-hashes))
  )
)
