; This is a highly specific puzzle that enforces that any new create coins are a 1of2 w/ a fixed left side
; and a variable right side that is put under pre-committed restrictions.
;
; The framework this is designed to fit in doesn't really support subtree behavior like this, so the specificity and
; limited flexibility of this puzzle is due to the fact that it's sort of a hack to support an existing feature with
; a framework poorly designed for it.
(mod
  (
    DELEGATED_PUZZLE_FEEDER_MOD_HASH
    1_OF_N_MOD_HASH
    LEFT_SIDE_SUBTREE_HASH_HASH
    INDEX_WRAPPER_HASH
    NONCE
    RESTRICTION_MOD_HASH
    MEMBER_VALIDATOR_LIST_HASH
    DPUZ_VALIDATOR_LIST_HASH
    Conditions
    new_right_side_member_hash
  )

  (include curry.clib)
  (include utility_macros.clib)
  (include condition_codes.clib)
  (defconstant ONE 1)

  (defun check_coins (conditions fixed_puzzle_hash)
    (if conditions
        (if (and (= (f (f conditions)) CREATE_COIN) (not (= (f (r (f conditions))) fixed_puzzle_hash)))
            (x)  ; (f (r (f conditions))) fixed_puzzle_hash)
            (check_coins (r conditions) fixed_puzzle_hash)
        )
        1  ; this will pass assert
    )
  )

  (defun-inline calculate_fixed_puzzle_hash
    (
      DELEGATED_PUZZLE_FEEDER_MOD_HASH
      1_OF_N_MOD_HASH
      LEFT_SIDE_SUBTREE_HASH_HASH
      INDEX_WRAPPER_HASH
      NONCE
      RESTRICTION_MOD_HASH
      MEMBER_VALIDATOR_LIST_HASH
      DPUZ_VALIDATOR_LIST_HASH
      new_right_side_member_hash
    )


    (curry_hashes INDEX_WRAPPER_HASH
      (sha256 ONE NONCE)
      (curry_hashes DELEGATED_PUZZLE_FEEDER_MOD_HASH
        (curry_hashes 1_OF_N_MOD_HASH
          (sha256 ONE (sha256 TWO
              LEFT_SIDE_SUBTREE_HASH_HASH
              ; right side calculation
              (sha256 ONE (curry_hashes INDEX_WRAPPER_HASH
                  (sha256 ONE NONCE)
                  (curry_hashes RESTRICTION_MOD_HASH
                    MEMBER_VALIDATOR_LIST_HASH
                    DPUZ_VALIDATOR_LIST_HASH
                    new_right_side_member_hash
                  )
              ))
          ))
        )
      )
    )
  )

  (assert
    (check_coins
      Conditions
      (calculate_fixed_puzzle_hash
        DELEGATED_PUZZLE_FEEDER_MOD_HASH
        1_OF_N_MOD_HASH
        LEFT_SIDE_SUBTREE_HASH_HASH
        INDEX_WRAPPER_HASH
        NONCE
        RESTRICTION_MOD_HASH
        MEMBER_VALIDATOR_LIST_HASH
        DPUZ_VALIDATOR_LIST_HASH
        new_right_side_member_hash
      )
    )
    ; then
    Conditions
  )
)
