(mod (MOD_HASH GENESIS_ID INNERPUZ parent_info my_amount inner_solution)

; MOD_HASH, GENESIS_ID, INNERPUZ are curried in by the wallet

; EXAMPLE SOLUTION '(0xfadeddab 0xdeadbeef 1 (0xdeadbeef 200) 50 ((51 0xfadeddab 100) (60 "trash") (51 deadbeef 0)))'

(include condition_codes.clvm)

; This is for the core

  (defun is-in-list (atom items)
    ;; returns 1 iff `atom` is in the list of `items`
    (if items
      (if (= atom (f items))
        1
        (is-in-list atom (r items))
      )
      0
    )
  )

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
      (if (l TREE)
          (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
          (sha256 1 TREE)
      )
  )

  ;; utility function used by `curry_args`
  (defun fix_curry_args (items core)
    (if items
        (qq (c (q . (unquote (f items))) (unquote (fix_curry_args (r items) core))))
        core
    )
  )

  ; (curry_args sum (list 50 60)) => returns a function that is like (sum 50 60 ...)
  (defun curry_args (func list_of_args) (qq (a (q . (unquote func)) (unquote (fix_curry_args list_of_args (q . 1))))))

  ;; (curry sum 50 60) => returns a function that is like (sum 50 60 ...)
  (defun curry (func . args) (curry_args func args))

  ;; hash a tree with escape values representing already-hashed subtrees
  ;; This optimization can be useful if you know the puzzle hash of a sub-expression.
  ;; You probably actually want to use `curry_and_hash` though.
  (defun sha256tree_esc_list
         (TREE LITERALS)
         (if (l TREE)
             (sha256 2 (sha256tree_esc_list (f TREE) LITERALS) (sha256tree_esc_list (r TREE) LITERALS))
             (if (is-in-list TREE LITERALS)
                 TREE
                 (sha256 1 TREE)
             )
         )
  )

  ;; hash a tree with escape values representing already-hashed subtrees
  ;; This optimization can be useful if you know the tree hash of a sub-expression.
  (defun sha256tree_esc
     (TREE . LITERAL)
     (sha256tree_esc_list TREE LITERAL)
  )

  ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
  (defun-inline create_fullpuzhash (MOD_HASH MOD_HASH_HASH GENESIS_ID inner_puzzle_hash)
    (sha256tree_esc (curry MOD_HASH MOD_HASH_HASH GENESIS_ID inner_puzzle_hash)
                    MOD_HASH
                    MOD_HASH_HASH
                    inner_puzzle_hash)
  )

  ; assembles information from the solution to create our own full ID including asserting our parent is a coloured coin
  (defun-inline create_my_ID (MOD_HASH MOD_HASH_HASH GENESIS_ID innerpuzhash parent_parent parent_INNERPUZ parent_amount my_amount)
    (sha256 (sha256 parent_parent (create_fullpuzhash MOD_HASH MOD_HASH_HASH GENESIS_ID parent_INNERPUZ) parent_amount) (create_fullpuzhash MOD_HASH MOD_HASH_HASH GENESIS_ID my_innerpuzhash) my_amount)
  )

  (defconstant launcher_puzhash 0x879d46938cfe331fb3cb1ea7ac5abde72e17041a0a2208549dfac1cb18d2e073)

  ; if we are the child of genesis check that the genesis puzzle only creates me
  (defun check_launcher (genesis_parent GENESIS_ID genesis_amount my_fullpuzhash my_amount)
    (if (= GENESIS_ID (sha256 genesis_parent launcher_puzhash genesis_amount))
      (list ASSERT_MY_COIN_ID (sha256 GENESIS_ID my_fullpuzhash my_amount))
      (x GENESIS_ID (sha256 genesis_parent launcher_puzhash genesis_amount))
    )
  )

  ; if parent_info is a list of length 2 then we are the eve coin
  ; if the parent_info is a list of length 3 then we are a singleton somewhere down the lineage
  ; if we are eve, then check the genesis was a launcher puzzle
  ; if we are a child of lineage, do the standard singleton lineage check

  (defun check_my_amount_and_ID (MOD_HASH MOD_HASH_HASH GENESIS_ID my_innerpuzhash parent_info my_amount)
    (if (logand my_amount 1)
      (if (r (r parent_info))
        (list ASSERT_MY_COIN_ID (create_my_ID MOD_HASH MOD_HASH_HASH GENESIS_ID my_innerpuzhash (f parent_info) (f (r parent_info)) (f (r (r parent_info))) my_amount))
        (check_launcher (f parent_info) GENESIS_ID (f (r parent_info)) (create_fullpuzhash MOD_HASH MOD_HASH_HASH GENESIS_ID my_innerpuzhash) my_amount)
      )
      (x)
    )
  )


  ; "assert" is a macro that wraps repeated instances of "if"
  ; usage: (assert A0 A1 ... An R)
  ; all of A0, A1, ... An must evaluate to non-null, or an exception is raised
  ; return the value of R (if we get that far)

  (defmacro assert items
    (if (r items)
        (list if (f items) (c assert (r items)) (q . (x)))
      (f items)
      )
    )

  ;; boolean and macro
  ;; This lets you write something like (if (and COND1 COND2 COND3) (do-something) (do-something-else))
  (defmacro and ARGS
    (if ARGS
        (qq (if (unquote (f ARGS))
                (unquote (c and (r ARGS)))
              ()
              ))
      1)
    )

    ;; take a boolean and a non-empty list of conditions
    ;; strip off the first condition if a boolean is set
    ;; this is used to remove `(CREATE_COIN xxx -113)`
    ;; pretty sneaky, eh?
    (defun-inline strip_first_condition_if (boolean condition_list)
      (if boolean
        (r condition_list)
        condition_list
      )
    )

    (defun-inline morph_condition (condition MOD_HASH MOD_HASH_HASH GENESIS_ID)
      (list (f condition) (create_fullpuzhash MOD_HASH MOD_HASH_HASH GENESIS_ID (f (r condition))) (f (r (r condition))))
    )

    ;; return the value of the coin created if this is a `CREATE_COIN` condition, or 0 otherwise
    (defun-inline created_coin_value_or_0 (condition)
      (if (= (f condition) CREATE_COIN)
          (f (r (r condition)))
          0
      )
    )


    ;;
    (defun-inline odd_cons_m113 (output_amount)
      (c
        (= (logand output_amount 1) 1)
        (= output_amount -113)
      )
    )


    ; Assert exactly one output with odd value exists - ignore it if value is -113

    ;; this function iterates over the output conditions from the inner puzzle & solution
    ;; and both checks that exactly one unique singleton child is created (with odd valued output),
    ;; and wraps the inner puzzle with this same singleton wrapper puzzle
    ;;
    ;; The special case where the output value is -113 means a child singleton is intentionally
    ;; *NOT* being created, thus forever ending this singleton's existence

    (defun check_and_morph_conditions_for_singleton (MOD_HASH MOD_HASH_HASH GENESIS_ID conditions odd_output_found)
      (if conditions
          (morph_next_condition MOD_HASH MOD_HASH_HASH GENESIS_ID conditions odd_output_found (odd_cons_m113 (created_coin_value_or_0 (f conditions))))
            (if (odd_output_found)
                0
                (x)  ;; no odd output found
            )
          )
     )


     ;; a continuation of `check_and_morph_conditions_for_singleton` with booleans `output_odd` and `output_m113`
     ;; precalculated
     (defun morph_next_condition (MOD_HASH MOD_HASH_HASH GENESIS_ID conditions odd_output_found (output_odd . output_m113))
         (assert
            (not (all output_odd odd_output_found))
            (strip_first_condition_if
               output_m113
               (c (if output_odd
                      (morph_condition (f conditions) MOD_HASH MOD_HASH_HASH GENESIS_ID)
                      (f conditions)
                  )
                  (check_and_morph_conditions_for_singleton MOD_HASH MOD_HASH_HASH GENESIS_ID (r conditions) (any output_odd odd_output_found))
               )
            )
        )
     )

  (defun check_id_and_check_outputs (MOD_HASH MOD_HASH_HASH GENESIS_ID parent_info innerpuzhash my_amount outputs)
    (c (check_my_amount_and_ID MOD_HASH MOD_HASH_HASH GENESIS_ID innerpuzhash parent_info my_amount)
       (check_and_morph_conditions_for_singleton MOD_HASH MOD_HASH_HASH GENESIS_ID outputs 0))
  )

  ;main
  (check_id_and_check_outputs MOD_HASH (sha256 1 MOD_HASH) GENESIS_ID parent_info (sha256tree1 INNERPUZ) my_amount (a INNERPUZ (c (list GENESIS_ID (if (r (r parent_info)) (f (r (r parent_info))) 0)) inner_solution)))
)
