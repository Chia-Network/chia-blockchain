; This is a proposal which lives inside a singleton, it represents a proposed way to spend DAO money
; If the proposal passes the INNERPUZ inside it will run, and the DAO Treasury will accept a spend to change itself or spend money

(mod (
  SINGLETON_STRUCT
  PROPOSAL_MOD_HASH
  PROPOSAL_TIMER_MOD_HASH
  CAT_MOD_HASH
  TREASURY_MOD_HASH
  LOCKUP_MOD_HASH  ; this is the mod already curried with what it needs - should still be a constant
  CAT_TAIL
  CURRENT_CAT_ISSUANCE
  PROPOSAL_PASS_PERCENTAGE
  TREASURY_ID
  PROPOSAL_TIMELOCK
  VOTES_SUM  ; yes votes are +1, no votes are -1
  TOTAL_VOTES  ; how many people responded
  INNERPUZ  ; this is what runs if this proposal is successful
  vote_amount_or_solution
  vote_info_or_p2_singleton_mod_hash
  vote_coin_id  ; set this to 0 if we have passed
  previous_votes
  lockup_innerpuzhash
)
  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)
  (include *standard-cl-21*)

  (defconstant TEN_THOUSAND 10000)
  (defconstant dao_finished_state 0xfb015415f2e6a09c1141f880fc2135beec6adf2a19e4d02a191432846db16559)

  (defun-inline calculate_win_percentage (CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE)
    (f (divmod (* CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE) TEN_THOUSAND))
  )

  (defun calculate_timer_puzhash (
    PROPOSAL_TIMER_MOD_HASH
    PROPOSAL_MOD_HASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    PROPOSAL_TIMELOCK
    PROPOSAL_PASS_PERCENTAGE
    MY_SINGLETON_STRUCT
    TREASURY_ID
    )
    (puzzle-hash-of-curried-function PROPOSAL_TIMER_MOD_HASH
                                     (sha256 ONE TREASURY_ID)
                                     (sha256tree MY_SINGLETON_STRUCT)
                                     (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
                                     (sha256 ONE PROPOSAL_TIMELOCK)
                                     (sha256 ONE CURRENT_CAT_ISSUANCE)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
    )
  )

  (defun calculate_lockup_puzzlehash (
    PROPOSAL_MOD_HASH
    SINGLETON_MOD_HASH
    SINGLETON_LAUNCHER_PUZHASH
    LOCKUP_MOD_HASH
    CAT_MOD_HASH
    CAT_TAIL
    PROPOSAL_TIMELOCK
    previous_votes
    lockup_innerpuzhash
  )
    (puzzle-hash-of-curried-function LOCKUP_MOD_HASH
                                     lockup_innerpuzhash
                                     (sha256 ONE PROPOSAL_TIMELOCK)
                                     (sha256tree previous_votes)
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE LOCKUP_MOD_HASH)
                                     (sha256 ONE SINGLETON_LAUNCHER_PUZHASH)
                                     (sha256 ONE SINGLETON_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
    )
  )

  (defun recreate_self (
    SINGLETON_STRUCT
    PROPOSAL_MOD_HASH
    PROPOSAL_TIMER_MOD_HASH
    CAT_MOD_HASH
    TREASURY_MOD_HASH
    LOCKUP_MOD_HASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    PROPOSAL_PASS_PERCENTAGE
    TREASURY_ID
    TIMELOCK
    VOTES_SUM
    TOTAL_VOTES
    INNERPUZ
  )
    (puzzle-hash-of-curried-function PROPOSAL_MOD_HASH
                                     (sha256tree INNERPUZ)
                                     (sha256 ONE TOTAL_VOTES)
                                     (sha256 ONE VOTES_SUM)
                                     (sha256 ONE TIMELOCK)
                                     (sha256 ONE TREASURY_ID)
                                     (sha256 ONE PROPOSAL_PASS_PERCENTAGE)
                                     (sha256 ONE CURRENT_CAT_ISSUANCE)
                                     (sha256 ONE CAT_TAIL)
				     (sha256 ONE LOCKUP_MOD_HASH)
				     (sha256 ONE TREASURY_MOD_HASH)
                                     (sha256 ONE CAT_MOD_HASH)
                                     (sha256 ONE PROPOSAL_TIMER_MOD_HASH)
                                     (sha256 ONE PROPOSAL_MOD_HASH)
                                     (sha256tree SINGLETON_STRUCT)
    )
  )

  (defun wrap_in_cat_layer (CAT_MOD_HASH CAT_TAIL INNERPUZHASH)
    (puzzle-hash-of-curried-function CAT_MOD_HASH
                                     INNERPUZHASH
                                     (sha256 ONE CAT_TAIL)
                                     (sha256 ONE CAT_MOD_HASH)
    )
  )

  (defun calculate_singleton_puzzle_hash (PROPOSAL_SINGLETON_STRUCT inner_puzzle_hash)
     (puzzle-hash-of-curried-function (f PROPOSAL_SINGLETON_STRUCT)
                                      inner_puzzle_hash
                                      (sha256tree PROPOSAL_SINGLETON_STRUCT)
     )
  )

  (defun calculate_treasury_puzzlehash (
    TREASURY_MOD_HASH
    treasury_singleton_struct
    PROPOSAL_MOD_HASH
    PROPOSAL_TIMER_MOD_HASH
    EPHEMERAL_VOTE_PUZHASH
    CAT_MOD_HASH
    CAT_TAIL
    CURRENT_CAT_ISSUANCE
    PROPOSAL_PASS_PERCENTAGE
    PROPOSAL_TIMELOCK
    p2_singleton_mod_hash
    )
    (calculate_singleton_puzzle_hash treasury_singleton_struct
      (puzzle-hash-of-curried-function TREASURY_MOD_HASH
        (sha256 ONE PROPOSAL_TIMELOCK)
	(sha256 ONE PROPOSAL_PASS_PERCENTAGE)
	(sha256 ONE CURRENT_CAT_ISSUANCE)
	(sha256 ONE CAT_TAIL)
	(sha256 ONE CAT_MOD_HASH)
	(sha256 ONE p2_singleton_mod_hash)
	(sha256 ONE EPHEMERAL_VOTE_PUZHASH)
	(sha256 ONE PROPOSAL_TIMER_MOD_HASH)
	(sha256 ONE PROPOSAL_MOD_HASH)
	(sha256 ONE TREASURY_MOD_HASH)
        (sha256tree treasury_singleton_struct)
      )
    )
  )

  ; main
  (if vote_coin_id

    ; if we're taking votes
    (c
      (list CREATE_PUZZLE_ANNOUNCEMENT vote_coin_id)  ; announce which coin we're taking a vote from, so nobody else gets spent
      (c
        (list
          ASSERT_PUZZLE_ANNOUNCEMENT  ; take the vote
          (sha256
            (wrap_in_cat_layer
              CAT_MOD_HASH CAT_TAIL
              (calculate_lockup_puzzlehash
                PROPOSAL_MOD_HASH
                (f SINGLETON_STRUCT)
                (r (r SINGLETON_STRUCT))
                LOCKUP_MOD_HASH
                CAT_MOD_HASH
                CAT_TAIL
                PROPOSAL_TIMELOCK
                previous_votes
                lockup_innerpuzhash
              )
            )
            (sha256tree (list (f (r SINGLETON_STRUCT)) vote_amount_or_solution vote_info_or_p2_singleton_mod_hash vote_coin_id)
            )
          )
        )
        (c
          (list
            CREATE_COIN  ; recreate self with vote information added
            (recreate_self
              SINGLETON_STRUCT
              PROPOSAL_MOD_HASH
              PROPOSAL_TIMER_MOD_HASH
              CAT_MOD_HASH
	      TREASURY_MOD_HASH
	      LOCKUP_MOD_HASH
              CAT_TAIL
              CURRENT_CAT_ISSUANCE
              PROPOSAL_PASS_PERCENTAGE
              TREASURY_ID
              PROPOSAL_TIMELOCK
              (if vote_info_or_p2_singleton_mod_hash (+ VOTES_SUM vote_amount_or_solution) (- VOTES_SUM vote_amount_or_solution))
              TOTAL_VOTES
              INNERPUZ
            )
            ONE  ; why would a proposal hold any value
          )
          (if (any TOTAL_VOTES SUM_VOTES)  ; this prevents the timer from being created if the coin has been created with fake votes
            ()
            (list
              (list
                CREATE_COIN
                (calculate_timer_puzhash
                PROPOSAL_TIMER_MOD_HASH
                PROPOSAL_MOD_HASH
                CAT_TAIL
                CURRENT_CAT_ISSUANCE
                PROPOSAL_TIMELOCK
                PROPOSAL_PASS_PERCENTAGE
                SINGLETON_STRUCT
                TREASURY_ID
                )
                0
              )
            )
          )
        )
      )
    )

    ; if we've passed
    (c
      (list CREATE_COIN dao_finished_state ONE)  ; move to announce finished mode. See previous comment about proposal amounts
      (c
        (list ASSERT_HEIGHT_RELATIVE 5)  ; soft close so all votes can get in
        (c
          (list ASSERT_PUZZLE_ANNOUNCEMENT  ; make sure that we actually have a matching treasury spend
            (sha256
              (calculate_treasury_puzzlehash
                TREASURY_MOD_HASH
                (c (f SINGLETON_STRUCT) (c TREASURY_ID (r (r SINGLETON_STRUCT))))
                PROPOSAL_MOD_HASH
                PROPOSAL_TIMER_MOD_HASH
		LOCKUP_MOD_HASH
                CAT_MOD_HASH
                CAT_TAIL
                CURRENT_CAT_ISSUANCE
                PROPOSAL_PASS_PERCENTAGE
                PROPOSAL_TIMELOCK
                vote_info_or_p2_singleton_mod_hash
              )
              (f (r SINGLETON_STRUCT))
            )
          )
          (c
            (list CREATE_PUZZLE_ANNOUNCEMENT TREASURY_ID)  ; create an announcement so the treasury can sync with us
            (c
              (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256  ; external timer
                (calculate_timer_puzhash
                  PROPOSAL_TIMER_MOD_HASH
                  PROPOSAL_MOD_HASH
                  CAT_TAIL
                  CURRENT_CAT_ISSUANCE
                  PROPOSAL_TIMELOCK
                  PROPOSAL_PASS_PERCENTAGE
                  SINGLETON_STRUCT
                  TREASURY_ID
                )
                (f (r SINGLETON_STRUCT))
                )
              )
              (if (all (> TOTAL_VOTES (calculate_win_percentage CURRENT_CAT_ISSUANCE PROPOSAL_PASS_PERCENTAGE)) (> VOTES_SUM 0))
                (a INNERPUZ vote_amount_or_solution)  ; run proposed chialisp
                ()  ; we don't run the chialisp, and instead move to the finished state
              )
            )
          )
        )
      )
    )
  )
)
