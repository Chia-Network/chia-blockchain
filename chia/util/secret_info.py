from __future__ import annotations

from typing import Optional, Protocol, TypeVar

from chia.util.observation_root import ObservationRoot, Signature

_T_ObservationRoot = TypeVar("_T_ObservationRoot", bound=ObservationRoot)


class SecretInfo(Protocol[_T_ObservationRoot]):
    def __bytes__(self) -> bytes: ...
    @classmethod
    def from_bytes(cls: type[_T_SecretInfo], blob: bytes) -> _T_SecretInfo: ...
    def public_key(self) -> _T_ObservationRoot: ...
    def derive_hardened(self: _T_SecretInfo, index: int) -> _T_SecretInfo: ...
    def derive_unhardened(self: _T_SecretInfo, index: int) -> _T_SecretInfo: ...
    @classmethod
    def from_seed(cls: type[_T_SecretInfo], seed: bytes) -> _T_SecretInfo: ...
    def sign(self, msg: bytes, final_pk: Optional[_T_ObservationRoot] = None) -> Signature: ...


_T_SecretInfo = TypeVar("_T_SecretInfo", bound=SecretInfo[ObservationRoot])
