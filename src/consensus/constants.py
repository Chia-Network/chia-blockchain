from typing import Any, Dict

constants: Dict[str, Any] = {
    "NUMBER_OF_HEADS": 3,  # The number of tips each full node keeps track of and propagates
    # DIFFICULTY_STARTING is the starting difficulty for the first epoch, which is then further
    # multiplied by another factor of 2^32, to be used in the VDF iter calculation formula.
    "DIFFICULTY_STARTING": 2 ** 32,
    "DIFFICULTY_FACTOR": 3,  # The next difficulty is truncated to range [prev / FACTOR, prev * FACTOR]
    # These 3 constants must be changed at the same time
    "DIFFICULTY_EPOCH": 128,  # The number of blocks per epoch
    "DIFFICULTY_WARP_FACTOR": 4,  # DELAY divides EPOCH in order to warp efficiently.
    "DIFFICULTY_DELAY": 32,  # EPOCH / WARP_FACTOR
    "SIGNIFICANT_BITS": 12,  # The number of bits to look at in difficulty and min iters. The rest are zeroed
    "DISCRIMINANT_SIZE_BITS": 1024,  # Max is 1024 (based on ClassGroupElement int size)
    "BLOCK_TIME_TARGET": 300,  # The target number of seconds per block
    # The proportion (denominator) of the total time that that the VDF must be run for, at a minimum
    # (1/min_iters_proportion). For example, if this is two, approximately half of the iterations
    # will be contant and required for all blocks.
    "MIN_ITERS_PROPORTION": 10,
    # For the first epoch, since we have no previous blocks, we can't estimate vdf iterations per second
    "MIN_ITERS_STARTING": (2 ** 22),
    "MAX_FUTURE_TIME": 7200,  # The next block can have a timestamp of at most these many seconds more
    "NUMBER_OF_TIMESTAMPS": 11,  # Than the average of the last NUMBEBR_OF_TIMESTAMPS blocks
    # If an unfinished block is more than these many seconds slower than the best unfinished block,
    # don't propagate it.
    "PROPAGATION_THRESHOLD": 300,
    # If the expected time is more than these seconds, slightly delay the propagation of the unfinished
    # block, to allow better leaders to be released first. This is a slow block.
    "PROPAGATION_DELAY_THRESHOLD": 1500,
    # Hardcoded genesis block, generated using tests/block_tools.py
    # Replace this any time the constants change.
    "GENESIS_BLOCK": b'\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x00[\x8c6\x15\x85\xbfg\x1c{\x19\xe5\x91y\x90,\rd\x0b=\x0b\x84\x8f\x9c\x83#k&&\xf3\xff\xd8\xb5\x009\x98\xd7\xaa\xe7\xbc\xde\xe2B\xd1\xe8\xd6\xdb\xa1\x10\xd4\x95\x81\xdf\xac\x1a\x00\xa5\x92j1\tN\xc0)\xb1\xa8\xc0\\\xb4J0!\x0f\x030\xc0\xb9\xdb\xebb\rt{\x90\xb8V&\x97\xf5\x95\x1d"\xc83&\xb1\x1f\x00\x00\x00\xf8\x81\xa6\x0by[\'@\x9d\x8f\xf2\xc52\xe4\xe04^%}\x91\x83\x8e\xf6\x8b\xfd\xec~e\xac\x84;u\xf7IW\xb0\x1b\x1e\xc5\xc5z)\x9d\xb8Ci\x84\x0f0\x18gl\x1eK5\xd4\x82\xfd[q\x18P/\x17[\xb1\x9c\xbc\x91\x90\x17{A~C\xe0{F\xaf\xef\x14\xd7\xd3\xc8M\x04s\x14\xab\xc5\x91Not\'\x1a\xb9\x8cs\x8a\x0f\xda\x8b\xf9\xda\xe4\xf2\xf8\x98\xbe\xad\xb4\x1f\xea\xae/\xb4$!l\xb3\xd43%\xc3~B\x18\x12m\xa0\x801\x0c\xf67Gr\x85S o>\xcb\x17I\x94\x1a\xe4,k\x06\x7f\xe4/<\xbcQJ\x97e\x8d\xd3Y[\x0c=\x1d\xe7\xde\x11\xac\xaac\xc4kT\xac\xe6\xeeZ\x0b@?\x81\x95\xa6\xb2\x08R\x8cb\xcb)"\xb9\xe9\xd8\x05!2,\xd6\xa1\xf1\x08}\xc8$0\xda\xf7\x11o\xf6\x13<\x9e\x17\xe2\xe9\xb5b\xa6/\xd6\xf6\xaa\x9e\xbd\xb4\x1e\xdc\x85\xf0\x13}\xf6\x93\xc3\x07\x806xM\xd1u\xa8\xd3\x01\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x00\x00\x00\x00\x00QT\x0c\x00!.\x97k\xa5\xb3tPU\xa6\xa7^\x91^u\xdc\x9d\rq\x18\xa1,\x16Q\xf3\xe3\xe5\xdd\xd2L\xb7\xa2\xeaO8\xfa\x80[8\\\x90\r&\xa5\xa6\xb9\x8f?\xa8@}\x06+,\xf0|\xd0\xca"\xe8\xa6UX\xa3\x00\x11\x86\xe7J\x9a5\x10;\xcb\xd4{\xde_\x1eX\x1ax\xd6\xd6\xa1$>\x184\x01z\x12\x9b\xc7>\x1bS\xff\xe7\x95\x8d\xed\xe4|\x1a\xed\xab\xbe<\xeb5\xf4\xcb4a\xdd\xbe\xecb\xc9\xf0\xa6e\x8b\x16j=\xfa1\x00\x00\x00\x00\x82\x00\x10\x1b\x8d3p\x15L\x9a\xbd\nc0\tZ\xc5p\xcdpVwt\xd6\x8f\x8a-\xeb4\x9b#\x07\x96\xa5\xe2\xcf\x9e\xf6\x92M\xe0C\xc2\xef\x8bR\xcc\xf9:\xd4&t\xefC\xc1\xc2\xa1\xe7V\xcd(\x9ff\xe3\xb9\x86\xff\xf3gY\x0c`\xa9\xba\xd3]YV\x01\xd0\xb7H%\xdd\xc8t\xcd1\xae\x9d\x1f\xb4\xca\x9f\x90\xf6r\t\xf4x@\xd6I3*H\xe1c\x9eeEU\xb4\x04\xba\xd8\nj\x93\xa9\xf0\xc0\xef>o\x05h\x16\x89\xd2\x85\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00^\x9e\xbc\x94\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x81\x15e\xbf\xf7\xe9\nx\xc4\x85\xa2\xec\xa9\xc8\xde\x967\xc4\xb4\xd5\x82\x89n\x92\x9b \xb8g\x07\xf8i\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00QT\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(1%W\xaaq4\x1a\x14:\x87\xd4\xb7\x84\x16\xef\xdd\x04\x9e\xc8\xe9\x8ew\xdd\xf8\x8b\xda\xb9J\x18o\xb6\x06\xf0[Y\xd3\xb2\x00\x00N\xd3\x8f\x7f\xf2s_\\\x1d\xfa8\xefOt0\x96\xe3\x7f\x8c5\xe8\xed0S=\xbe\xbf\xa2\xfa\x98\xdbH\xbd]<\xee\xf1\xb4\xf3\xc8)6s\xd1\xdc\xfd[\x9c\x0cX\xceJ\xad\x017\xb9^\'nt\xb9\xdf\x0b\xd3^]GF\x05X\xb6q1\x02\xb6\xeb\x1f]\x9e\xd1\x96\xbd\xa2zB\xbf\xa2R\x0e\xb2\xf0\x8c\x04W\x86\x18\x8c\xb9\x01%\x17\xc8\x17\xfe\xade\x02\x87\xd6\x1b\xdd\x9ch\x80;k\xf9\xc6A3\xdc\xab>e\xb5\xa5\x0c\xb9(1%W\xaaq4\x1a\x14:\x87\xd4\xb7\x84\x16\xef\xdd\x04\x9e\xc8\xe9\x8ew\xdd\xf8\x8b\xda\xb9J\x18o\xb6\x00\x00\x01\xd1\xa9J \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00j\xfbd\xe2w\xe3\xe6\x88v\xd6\xd2fX\x8e~\x89\x0b\\\x97\xcb\xeb^E\x9b\x85\x0b\xcbSmI\xb9S\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00P\xeft\x96\xed\x12_\xb9_\xa7\xc7n&\xddS\xe7]\xe0\x99\xce\xb6\x8d.$R\x85c\xe35\x8f=\x18\x13\xd9\xd23d\xec\x16\xbb\xc1\x1d?vG\xb7\xbf\x91\x18\xf1Nm\xce\rV\x01<\xdc%t\x04\\AR\xcb[6\x89o0\x9c\xccu\x1f%a^a\xb90\xfc\x8f)\xb04O\x0edN\xe3\x88&d\xe2\xaf \x00\x00',  # noqa: E501
    # Target tx count per sec
    "TX_PER_SEC": 20,
    # Size of mempool = 10x the size of block
    "MEMPOOL_BLOCK_BUFFER": 10,
    # Coinbase rewards are not spendable for 200 blocks
    "COINBASE_FREEZE_PERIOD": 200,
    # Max coin amount uint(1 << 64)
    "MAX_COIN_AMOUNT": b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
    # Raw size per block target = 1,000,000 bytes
    # Rax TX (single in, single out) = 219 bytes (not compressed)
    # TX = 457 vBytes
    # floor(1,000,000 / 219) * 457 = 2086662 (size in vBytes)
    # Max block cost in virtual bytes
    "MAX_BLOCK_COST": 2086662,
    # MAX block cost in clvm cost units = MAX_BLOCK_COST * CLVM_COST_RATIO_CONSTANT
    # 1 vByte = 108 clvm cost units
    "CLVM_COST_RATIO_CONSTANT": 108,
    # Max block cost in clvm cost units (MAX_BLOCK_COST * CLVM_COST_RATIO_CONSTANT)
    "MAX_BLOCK_COST_CLVM": 225359496,
}
