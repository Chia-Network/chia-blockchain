from typing import Any, Dict

constants: Dict[str, Any] = {
    "NUMBER_OF_HEADS": 3,  # The number of tips each full node keeps track of and propagates
    "DIFFICULTY_STARTING": 2 ** 20,  # These are in units of 2^32
    "DIFFICULTY_FACTOR": 3,  # The next difficulty is truncated to range [prev / FACTOR, prev * FACTOR]
    # These 3 constants must be changed at the same time
    "DIFFICULTY_EPOCH": 128,  # The number of blocks per epoch
    "DIFFICULTY_WARP_FACTOR": 4,  # DELAY divides EPOCH in order to warp efficiently.
    "DIFFICULTY_DELAY": 32,  # EPOCH / WARP_FACTOR
    "SIGNIFICANT_BITS": 12,  # The number of bits to look at in difficulty and min iters. The rest are zeroed
    "DISCRIMINANT_SIZE_BITS": 1024,  # Max is 1024 (based on ClassGroupElement int size)
    "BLOCK_TIME_TARGET": 300,  # The target number of seconds per block
    # The proportion (denominator) of the total time that that the VDF must be run for, at a minimum
    # (1/min_iters_proportion). For example, if this is two, approximately half of the iterations
    # will be contant and required for all blocks.
    "MIN_ITERS_PROPORTION": 10,
    # For the first epoch, since we have no previous blocks, we can't estimate vdf iterations per second
    "MIN_ITERS_STARTING": (2 ** 20),
    "MAX_FUTURE_TIME": 7200,  # The next block can have a timestamp of at most these many seconds more
    "NUMBER_OF_TIMESTAMPS": 11,  # Than the average of the last NUMBEBR_OF_TIMESTAMPS blocks
    # If an unfinished block is more than these many seconds slower than the best unfinished block,
    # don't propagate it.
    "PROPAGATION_THRESHOLD": 300,
    # If the expected time is more than these seconds, slightly delay the propagation of the unfinished
    # block, to allow better leaders to be released first. This is a slow block.
    "PROPAGATION_DELAY_THRESHOLD": 1500,
    # Hardcoded genesis block, generated using tests/block_tools.py
    # Replace this any time the constants change.
    "GENESIS_BLOCK": b'\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\n\x8d\xc0<{\xc6\xa1\xa1*\x8c\x108\x08\x16\x9a\xa7\x8a\xa6l2#6_\x81G87\xb9:\xa8DJ\xceeU\xa6\x92s\x11\x81\xed\xc31\x88\xf2 k\x8c\x97\t\x8fX\xcd\x800\\&\xa4?\xc1W\xc3k`\xafP\x19\x82\xd4h\x84\xc0\xb8g\xbc\x01\xfa\xa4\xe8z\x8c\xe6\xcb7\x8b\xde\xa8\xf6Y\x0f\x07\xd9\xc6W\n\xd2\x1d\x00\x00\x00\xe8K\x13)5\xc3\xed\xd2d\xdb\x91U\xfe#G\xc6\xef\xcbs5\x02\xd7\xd7\xba\x98\xab\xd0\x9aa\t\xd3?+k\xf3\x97u|\x90\xa4,\x144\xc6\xbe\xa57+\xdbV\xe0\xa4&\xc7\x90\x1aT\xe6y\xa3@\x1f\x12\xcd\xee"\x0fB\xdd]\x03X\xc7\x1eUy\x1e5\x9c\xf0\xebL\xca\x0e\xf9\xf7\xd9\xf9\x93Y\xacm\xa1eQ\x05\xef\xef\xaa\x89\xe9\xb5\xda\xf7\xc8u\xea\x19\x8bS]\x17\x19a\x9f\xdb\x96C\x10\xf7\x93\x92\xa8\xbc\xec\x95\xf1\x86\xb6\xba\xe3\x9aPy\xc1\xccg\xd1{<\xe6)*P\t\x86\xea3H\xb1\x1a\x7f\xfa\xe9hX\x85B6\xd3\x00F,\xeeuv\xa9\xb6\x8dNG\x06\xa2\x87\x85l\xe2\xa4\'\xf0\xb0:\xc8EVu\x8bu1xO\xcd5\xbe!#\x93O\xe4\xf6Woo\xb5\xa3\x12\xb1_\xab`\x0b\x8a\x1eS\xf1\xa02-b\x0f\x15\xb1\rj\xb4\x0cMf\xc5\x8d\xe6TO\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x10n\xe6\x008~\xdcq\xd5\xad\xd6e\xa6\xb15\xf0"DI\xf2\x1b\xd5\x84\xbd\x1e\xfb\xa8\xd9\x1d\xbf\xf9\x0c\xeda\x08V\xb6\xbbV4\xa7\x13Mg\xdf\xf1s}\xef\xc245\r\xbf+k\xa5\xfc\x00,z\xe1\xad{Z\xf1\x0b\x97\x00\x0b=\xca\x1f\xa6\x12\xb5\x83\xb5\xb1\xb4hz\xfd]4\x00\x93I\x14\xe2h\tZ[\xa2\x99i\xbc\xda2)\x15\x8e\x03\x93\nW\x8e7\xb3\x8d\x7f\xb5v\x10C\x06A"\xf9\x9d\xdf\xfc\xaaOi\x861T\xbb%\x8e/\x00\x00\x00\x00\x82\x00%\xbe\xd2\x93G@\x0ej5\xbd\x16\x9c\xee\xef\xaa\xef\x17 3\x8d\xd5R\xab\xea\xde\xa6)\xde\xe6|Z\xb8\xdd\xb5\x93q+[\xa0\xf1\rcJT\xca {R\xd8\xedJ\x03\x02\xe6W\x0c\xf5\xdb\x010!a?\x9b\xff\xf0#\x91\x8b\xdf\x8e\x18?\x07\x06\x16z\x7f\xa5@C\x10\x07\xcf\xcb3\x8c\x9f\xfem\xbf\xe2\xc8hQA\xa7\x95c\xd2\x9f\n\xaa\xd5r\xd5\xd4)\xfa.U\x18\xe7,h\xc1\x01\'\xc8\x13\xec\x0e\n\x18\xfdc\xf7Po\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00^\x9e\x95\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\xa9j\x8f\xa3q\xd2\xc9g\xc7\xb8\x1a\xee\x8c\xa5\x14\xe6w\xde\xc1g\xb5\xc0xt\xbf\xfa[\xba2\xcbU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10n\xe6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00(1%W\xaaq4\x1a\x14:\x87\xd4\xb7\x84\x16\xef\xdd\x04\x9e\xc8\xe9\x8ew\xdd\xf8\x8b\xda\xb9J\x18o\xb6\x06\xf0[Y\xd3\xb2\x00\x00X\x02LC.5\x16\xa5i|^\xde\x05\x15\xf1\x13Z\xbb\x85=\xd7o-\x9f\xa5\x17\n\xacU\xf4\xeeh"S\xef8o\xdc\x84\xc0\x84$\xc6t\xa5f.\xf7\x10\x99l\x17E\xdeH\x91>\x98*\xcd2\x08\xf1\xce\xde\xe1\xa4JH\xfa\x06\x81\xf2\xac\xb9\xf60\xe3\xc2\xc6l\xe6\xfc\x03g\xaa\xe9\xc7\x8f\xa6\xca\xfd\xbe\xdfV\xbd\x8c\xb9\x01%\x17\xc8\x17\xfe\xade\x02\x87\xd6\x1b\xdd\x9ch\x80;k\xf9\xc6A3\xdc\xab>e\xb5\xa5\x0c\xb9(1%W\xaaq4\x1a\x14:\x87\xd4\xb7\x84\x16\xef\xdd\x04\x9e\xc8\xe9\x8ew\xdd\xf8\x8b\xda\xb9J\x18o\xb6\x00\x00\x01\xd1\xa9J \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc6\xaaZ\x7f\xc0~\x9e\xbd\x0c\x8dn\x01\xe9e\x0cF\x17\xbd\xed\xb4\xc8LK\x11\x17\x89\xbeq\xd0PQk\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8V\xcf\xff\xbfN\xa74)\xf8\\i|\x04&\x14gs\xa7\x91\xe7\xe5\x90\xe6\x9b\xa0cfI\xb7\x1b\xe9}\xc6:}\xd9\xfe\x12E\xda\xc6eC>\x0b\x07z\x16\x90u\x0b\x1e\t<\xf2\x113\x89*N\xbd\xdb\x18\x86\xd1}\xff+j\xd8\x10:i\x1d(\xed\xe0\x0e\x1a8\xd6\xca\xfbx\x8b\xb3\x08\x1a\xd3\xaa\x83\xc8\x02\x8e\xa1\x00\x00',  # noqa: E501
    # Target tx count per sec
    "TX_PER_SEC": 20,
    # Size of mempool = 10x the size of block
    "MEMPOOL_BLOCK_BUFFER": 10,
    # Coinbase rewards are not spendable for 200 blocks
    "COINBASE_FREEZE_PERIOD": 200,
    # Max coin amount uint(1 << 64)
    "MAX_COIN_AMOUNT": b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
    # Raw size per block target = 1,000,000 bytes
    # Rax TX (single in, single out) = 219 bytes (not compressed)
    # TX = 457 vBytes
    # floor(1,000,000 / 219) * 457 = 2086662 (size in vBytes)
    # Max block cost in virtual bytes
    "MAX_BLOCK_COST": 2086662,
    # MAX block cost in clvm cost units = MAX_BLOCK_COST * CLVM_COST_RATIO_CONSTANT
    # 1 vByte = 108 clvm cost units
    "CLVM_COST_RATIO_CONSTANT": 108,
    # Max block cost in clvm cost units (MAX_BLOCK_COST * CLVM_COST_RATIO_CONSTANT)
    "MAX_BLOCK_COST_CLVM": 225359496,
}
