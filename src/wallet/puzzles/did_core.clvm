(mod (genesis_id corehash parent_info my_amount innerpuz_reveal solution)

; EXAMPLE SOLUTION '(0xfadeddab (0xdeadbeef 0xcafef00d 200) 50 (a) ((51 0xfadeddab 100) (60 "trash") (51 deadbeef 0)))'

; 51 = CREATE_COIN
; 52 = ASSERT_CONSUMED
; 53 = OP_ASSERT_MY_ID

(defconstant OP_ASSERT_MY_ID 53)

; This is for the core

  (defmacro and ARGS
    (if ARGS
      (qq (if (unquote (f ARGS))
            (unquote (c and (r ARGS)))
            ()
      ))
    1)
  )

  (defmacro not (ARGS)
    (qq (if (unquote ARGS) 0 1))
  )

  ; takes a lisp tree and returns the hash of it, but allows for escape character 97 so i precomputed hash value can be used
  (defun sha256tree0 (TREE)
    (if (l TREE)
      (if (and (not (l (f TREE))) (= (f TREE) 97))
          (f (r TREE))
          (sha256 2 (sha256tree0 (f TREE)) (sha256tree0 (r TREE)))
      )
      (sha256 1 TREE)
    )
  )

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
      (if (l TREE)
          (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
          (sha256 1 TREE)
      )
  )

  (defmacro create_outputs (puzreveal solution)
      (qq ((c (unquote puzreveal) (unquote solution))))
  )

  (defun create_fullpuzhash (my_innerpuzhash corehash)
    (sha256tree0 (qq (r (c (q (unquote my_innerpuzhash)) ((c (q (97 (unquote corehash))) 1))))))
  )

  ; assembles information from the solution to create our own full ID including asserting our parent is a coloured coin
  (defmacro create_my_ID ((parent_parent parent_innerpuz parent_amount) my_innerpuzhash my_amount corehash)
    (qq (sha256 (sha256 (unquote parent_parent) (create_fullpuzhash (unquote parent_innerpuz) (unquote corehash)) (unquote parent_amount)) (create_fullpuzhash (unquote my_innerpuzhash) (unquote corehash)) (unquote my_amount)))
  )

  ; asserts that the information in the solution about ourselves is correct, and that our parent is a coloured coin
  (defmacro assert_my_id (my_ID)
    (qq (c (q 53) (c (unquote my_ID) (q ()))))
  )

  (defun check_my_amount_and_ID (genesis_id parent_info my_innerpuzhash my_value corehash)
    (if (> my_value 0)
      (if (l parent_info)
        (assert_my_id (create_my_ID ((f parent_info) (f (r parent_info)) (f (r (r parent_info)))) my_innerpuzhash my_value corehash))
        (list OP_ASSERT_MY_ID (sha256 genesis_id (create_fullpuzhash my_innerpuzhash corehash) my_value))
      )
      (x "my_amount_and_id fail")
    )
  )

  (defun check_outputs_value (outputs_loop flag)
    (if outputs_loop
      (if (= (f (f outputs_loop)) (q 51))
        (if (> (f (r (r (f outputs_loop)))) 0)
          (if flag
            (x "more than one output with value > 1")
            (check_outputs_value (r outputs_loop) 1)
          )
          (check_outputs_value (r outputs_loop) flag)
        )
        (check_outputs_value (r outputs_loop) flag)
      )
      1
    )
  )

  (defun check_id_and_check_outputs (genesis_id corehash parent_info my_amount innerpuzhash outputs)
    (if (check_outputs_value outputs 0)
      (c (check_my_amount_and_ID genesis_id parent_info innerpuzhash my_amount corehash) outputs)
      (x "check_id_and_check_outputs fail")
    )
  )

  ;tests
  ;(f (f (create_outputs innerpuz_reveal solution)))
  ;(list corehash parent_info my_amount innerpuz_reveal (create_outputs innerpuz_reveal solution))
  ;(check_outputs_value (create_outputs innerpuz_reveal solution) 0)
  ;(check_my_amount_and_ID genesis_id parent_info innerpuz_reveal my_amount corehash)
  ;(create_fullpuzhash my_innerpuz corehash)
  ;(assert_parent_is_genesis my_innerpuz my_amount corehash)



  ;main
  (check_id_and_check_outputs genesis_id corehash parent_info my_amount (sha256tree1 innerpuz_reveal) (create_outputs innerpuz_reveal solution))

)
