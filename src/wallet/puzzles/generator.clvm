(mod block_program

  (defmacro and ARGS
      (if ARGS
          (qq (if (unquote (f ARGS))
              (unquote (c and (r ARGS)))
              ()
          ))
      1)
  )

  (defmacro not (ARGS)
      (qq (if (unquote ARGS) 0 1))
  )

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
        (if (l TREE)
            (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
            (sha256 1 TREE)
        )
  )

  ; TODO: this could be a macro
  (defun npc_list_for_coinsolution (coin_solution)
    ; The pattern (= (r (r foo)) ()) checks that foo is a list of length 2
    (if (and (= (r (r coin_solution)) ()) (= (r (r (f (r coin_solution)))) ()) (= (strlen (f coin_solution)) 32))
      (list (f coin_solution) (sha256tree1 (f (f (r coin_solution)))) (a (f (f (r coin_solution))) (f (r (f (r coin_solution))))))
      (x)
    )
  )

  (defun generate_npc_pair_list (coin_solutions npc_list)
    (if coin_solutions
      (generate_npc_pair_list (r coin_solutions) (c (npc_list_for_coinsolution (f coin_solutions)) npc_list))
      npc_list
    )
  )

  ; main
  (generate_npc_pair_list (a block_program (q . ())) ())
)
