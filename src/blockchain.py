from collections import defaultdict
from typing import List, Dict
from src.types.sized_bytes import bytes32
from src.types.trunk_block import TrunkBlock
from src.types.full_block import FullBlock
from src.types.block_body import BlockBody
from src.types.block_header import BlockHeader

genesis_block_bytes: bytes = b'\x87\xe9x\x8aDk\xd7\x0f\xec\xab\xa7d\xb2y\x1afW:\xa51\x97F>\xce\xcb\xa0\x89b[\x7fPo\xe9^";\xc2\xdf*K\xf1\xbb\xeb\x85\x9b)\xdd\x08\x8c\xcc\x8b\xcb\xe9\x14\x13\xfd\x13\x1c/j\xea#le\x05\xbc\x8d(\xebpA\x1a\x98\x02\x91+\xd4\xf8\xb1I\xb3\x04$m\x86\xea4\tT\xdc\xf4\x90\xe7\xec\xbc\x1d\x13\x00\x00\x00\x98\xd76\xa6\xb06*y\xf4s\xfc\xc1\x86\xa8\x88\xa3\xf2\'\xb13ll\xcb\x8d\x01\xb8\x064\x00\xf8\xc7\xb2\x7f\xbf3\xe9\xf3\x11Ja_\xf72\x19W\x0c\x8b\x84r9r\t\xae\xd0\x04~\x9e\xd1\xf6\xa1\x92e\xacqPS$\xbe\x83\xa2\x0b&Sov\x92\\\xb1\xdb\xcf\xfa=\xc8\xe8"\xe7\xcf\x06\xf0|?\xd9?\x7f\xb6\x9b41{HQ<\x997k\x85\x17h\xfd\xb5\xe7\x95\x1e\xf3\xcb\x12PA6\x8d\x83\xa7\x89\x91;&\xe5\x0c\xae\x9b\xcb\xe0\n\x0e\x9dW\xdff\x01~\xda\xa8]\x8e\x0f\xd5\xe0h\x94\xe2vi\x15\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf7\xa9\xd7\x03\xc4:j\xf6\x99}\xf7\xef`\xbb\xbc\xf2\xf3\x1a?4:>\xff)L\x04\xf2\x84\x1f:,\xb2%\x0fR\xcb-o\x19f\xa2\x9fj\xc7q\xfa\x1c\xd1\x85\xb8\xf8S\x13\x96\xc8\xa4\x02l\x0f\xe65a~\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00]G\xc9\x17\xe8\x03\xeb\xc4\x90\r\xbf`\x9b\xc2\xf4\x93\x8c/\xb2\xff\x13\xd3\xe5c\x942\x9ctY\xaa}1e\xe6\xf7\xc6\xf7\xa9\xd7\x03\xc4:j\xf6\x99}\xf7\xef`\xbb\xbc\xf2\xf3\x1a?4:>\xff)L\x04\xf2\x84\x1f:,\xb29\x1b\x0b-5\x8b\xc0k\xb1}!\x1bJ+T\x84\xb4~p\x10\x14\xad\x98H\x17\xa4\xd3\'VJ\x82\x91\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd2\x84\xa1:\x8a\xf28\xd9\x82]\x973\xd9)\x91\x96V\x00}\x03=\xd1G\x8c\xd5\x92g\n\xcb@\xc0\xaf\x166k\xd7%\x01\x07\t\x0f\xf4\x9a\xac\xf0 \x1e\x93\x0e\xcb\xe9\xb3[D\xc9CV\xe3.u\x03\xfe\xca\xfb\x8c\x921\xf5\xef\xcc\xc6\xfb\x08~\x93D\x16T\x9e\xfa\xc9\x1b\xa5\xe2\xa7\xc5\xd9\x02\xbc\xcaX\x80T\x86\xce\xaa\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\n\x99@\xb9R"\xa1\xd1\x9a\xbbs\xc1\x92\xf2\xc1\r\xc6[2\xbc\xc7\xa7\x03\xdb\x1b@Eo-\xbf\x1eAn\xc5\xb4\r\x85\'\x80\xbb\xbf\xa8]\xe0\xd0\xf6\x1a\x95\xf9\xb7v8\xa5\xe5&\xf9\x02\xe8:\xf3\xf0c\x81\x8a\x0cfv\x00%m>\xdc\xa6\x8b\x93\xd0$\xad\x9d\xa1\xd5\n\xdf~\x97e\xaf\xadn$\xf0\xde\x84\xa7\xe4n\xf8}k\xc3\x9c\x10\xe2\x10\xaf\xb8$\x13\xe9\xfd\x19\n\x86!\xd5\xf4x\x8aG\xae\xaa\xa6\xfa\x1c\x13\xca#\x8d\x9dF\xad-3\xb6\x8d\xfd\xb9\x17\x1dA8M\xd4\xd7$\xb6?\xcd\xc7\x1fc"\xb5\xb3\x0c\x80\x05\x1bU\xb9\x18\x00\x00\x00\x00\x00\x00\x00\x00\x87w\xcfJ\xe9\x97\xddC\xff\xfc\xd9M\x19\xed\xd1\x1e\xca\xb7\x81\x0f\xceb\xc2\xcf\xc9\xd1\x19)\xd7\x04,\xbc\xa9\xac\xb6\xc7\x92\x88\x91\x1b%\x06{\xb9\x8b\x9d0#\ns\xed\x16\x07\xf9\xb0\xc2\x1fw7epS~\xa8\xaeyN\xa2\xccj\x96#u9\x84\xacw\x9c\x98j\'=\t\\g\xc56\xba\xfa\x1a\xaf\x9a\xbb\x1c\xa4l\xe3\xb0\xc4B\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99o\xb9$\'\xaeA\xe4d\x9b\x93L\xa4\x95\x99\x1bxR\xb8U'  # noqa: E501


class Blockchain:
    def __init__(self):
        pass
        genesis_trunk = FullBlock.from_bytes(genesis_block_bytes).trunk_block
        self.heads: List[TrunkBlock] = [genesis_trunk]
        self.blocks: Dict[bytes32, TrunkBlock] = {
            genesis_trunk.header.header_hash: genesis_trunk
        }
        # Block is unconnected iff floating_demand[prev_hash] contains header_hash
        self.floating_demand: Dict[bytes32, List[bytes32]] = defaultdict(list)

    def get_current_heads(self) -> List[TrunkBlock]:
        return self.heads

    def _reconsider_heads(self, trunk: TrunkBlock) -> bool:
        if trunk.challenge.height > min(t.challenge.height for t in self.heads):
            self.heads.append(trunk)
            while len(self.heads) >= 4:
                self.heads.sort(key=lambda b: b.challenge.height, reverse=True)
                self.heads.pop()
            return True
        return False

    def block_can_be_added(self, block_header: BlockHeader, block_body: BlockBody) -> bool:
        """
        Called by the full node of the farmer, when making a new block (that doesn't have PoT yet).
        """
        return True

    def add_block(self, block: FullBlock) -> bool:
        if not block.is_valid():
            # TODO: discredit/blacklist sender
            return False

        trunk = block.trunk_block
        prev_hash = trunk.prev_header_hash
        prev_trunk = self.blocks[prev_hash]
        header_hash = trunk.header.header_hash
        # height = trunk.challenge.height

        self.blocks[header_hash] = trunk
        added_to_head = False

        # if this block is connected...
        if prev_hash in self.floating_demand.get(prev_trunk.prev_header_hash, ()):
            added_to_head |= self._reconsider_heads(block)

            # DFS to connect floating chain
            stack = self.floating_demand.pop(prev_hash, [])
            while stack:
                sky_block_hash = stack.pop()
                added_to_head |= self._reconsider_heads(self.blocks[sky_block_hash])
                stack.extend(self.floating_demand.pop(sky_block_hash, []))
        else:
            # Block is floating
            self.floating_demand[prev_hash].append(header_hash)

        return added_to_head

    def heads_lca(self):
        cur = self.heads[:]
        heights = [t.challenge.height for t in cur]
        while any(h != heights[0] for h in heights):
            i = heights.index(max(heights))
            cur[i] = self.blocks[cur[i].prev_header_hash]
            heights[i] = cur[i].challenge.height
        return cur[0]
