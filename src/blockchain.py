from hashlib import sha256
from typing import List, Dict
from src.types.sized_bytes import bytes32
from src.types.foliage_block import FoliageBlock
from src.types.block_body import BlockBody
from src.types.block_header import BlockHeader
from src.types.full_block import FullBlock


genesis_block_bytes: bytes = b'\x87\xe9x\x8aDk\xd7\x0f\xec\xab\xa7d\xb2y\x1afW:\xa51\x97F>\xce\xcb\xa0\x89b[\x7fPo\xe9^";\xc2\xdf*K\xf1\xbb\xeb\x85\x9b)\xdd\x08\x85~\xd8\x14w[\x8c\xca(~-\x0f\x88S\xd4T\xef\x12\xc6\xb8\x1c0\xda\x05\xe1\xc2\xdbP\xca>e\\a\xdf\x80\xaboq\x8e)\x85\x19\xdb\xdbZ\xc7\xba\xa7\x13\x07$\x06\n\xff\xe4}\x94\xf7\x98ar\xcc\xa1}\xbev\x9cq\x01qutB\xd5\\\xc0\xd0\x8bp\n\xf3HT\xe4\x87\xe0\x17\x9a\xa1F\x01c\x864\xf2\xe4t6p\xbd\xe5\xbb\xac\x99\xe7\xb7S\xf8c\xc2\xf09\x88\xca\x83L\xdf\xba\x03BK{.\xef\xae\xa1^T\x91<\x96\xbaX\x8b\xee\xd2\x9a\x01TP\xf1,\x8b\xc7\xdbL\x1c\xf7\x04\x1b+\xec6i-\x14\xb9\x8bGm\n\xe8\x165\xf1\x1c]?L&]b\x9bH\x18\xabl|\xc8\xf0\xe2\x84Gqh)\xbaA\xd81\xecX\xac!\xec\xe1\x9b+\xb6 \x8f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08=S\x0bV\xe3La\x84h\xe2\x9b\x875\xa8\x16\xaa.\xca\xdd!v\x7fj\x07y$\x964\x86\x01\xff%\x0fR\xcb-o\x19f\xa2\x9fj\xc7q\xfa\x1c\xd1\x85\xb8\xf8S\x13\x96\xc8\xa4\x02l\x0f\xe65a~\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00]@!\xcc\xd9\x9d_\xc8\x1a\xf8^\x1cX]\x19\xb8>P\xa6L\xa35\xf6\xbb\xfa\x02Df\x18\x84\x92e\xe8\xf6\xa1\xf6\x08=S\x0bV\xe3La\x84h\xe2\x9b\x875\xa8\x16\xaa.\xca\xdd!v\x7fj\x07y$\x964\x86\x01\xffY\xc9x\xc3K\x8d\x87\xf9s\xbd\xb7\x0e\xb15\xca1>\r\x98\xf7\xb4uU\xc75\xef\x87\xe5!M\xa1\xac\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd6\xa2l\x86\xe2\xe2J[\xb5\n\xb7gAOY\xc25\x88\x18\x1c\xea\xf8\xa9\xfcg\x1735*)\x84\x83\xfc\'\xd0\xda\xa2\xbb@\x0f\x07\xdd\x87\x98S\x9aw\x82\x0c\x19y7\xb9\xc6<l\xfd\xbf\xab([\x1d\xe3\xe7\xc4g4\xc2\xd9\x84\xa8\xa1.\xa0\xeb7\xd10\x03\x1c\x97\xd1\x14%\xe4\x18\x8fc\xac\xf2\x9f9\x1b\x98\xa7+\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\n\x99@\xb9R"\xa1\xd1\x9a\xbbs\xc1\x92\xf2\xc1\r\xc6[2\xbc\xc7\xa7\x03\xdb\x1b@Eo-\xbf\x1eAn\xd6G\x7f\xd1\xae\x043@\xd0$\xa3gdF\xa2\xb9d\x84{\x98\xb0\xa0W\x91n\r\x12\xc2b\xb0\rE\xf7\xca\x00t\x9b\x9f\x84t\'r\xef \xd9\x8ea\xf5\t6\xcc\xc7\xdb\xfb\x13\xdd*KR\xfb\t\x0f\x9aQ\x8bTXC\xa8\xc0c\xc4D<\xb6\xff\x85\x19\xfcJ\x1d\x0b\xcb\xef\xfc\xa5\xf4#\xd2\xecD\x9a\x93\x8a\x80\xb8\xd8#ee#\x81\x85A\xe1\xd8i\x02\x85\x8e\x1dO\x14\x82\xf0\xb8>\xc03\xb6\x9bh{\r\x0c\xb5H{\x00\x00\x00\x00\x00\x00\x00\x00\x87w\xcfJ\xe9\x97\xddC\xff\xfc\xd9M\x19\xed\xd1\x1e\xca\xb7\x81\x0f\xceb\xc2\xcf\xc9\xd1\x19)\xd7\x04,\xbc\xa9\xac\xb6\xc7\x92\x88\x91\x1b%\x06{\xb9\x8b\x9d0#\ns\xed\x16\x07\xf9\xb0\xc2\x1fw7epS~\xa8\xaeyN\xa2\xccj\x96#u9\x84\xacw\x9c\x98j\'=\t\\g\xc56\xba\xfa\x1a\xaf\x9a\xbb\x1c\xa4l\xe3\xb0\xc4B\x98\xfc\x1c\x14\x9a\xfb\xf4\xc8\x99o\xb9$\'\xaeA\xe4d\x9b\x93L\xa4\x95\x99\x1bxR\xb8U'


class Blockchain:
    heads: List[FoliageBlock] = []
    blocks: Dict[bytes32, FoliageBlock] = {}

    def __init__(self):
        pass
        # genesis_block: FullBlock = FullBlock.from_bytes(genesis_block_bytes)
        # self.heads = [genesis_block.foliage_block]
        # self.blocks[sha256(genesis_block.foliage_block.header.serialize()).digest()] = genesis_block.foliage_block

    def get_current_heads(self) -> FoliageBlock:
        return self.heads

    def add_block(self, new_block_foliage, new_block_body: BlockBody) -> bool:
        if new_block_foliage.challenge.height > min([b.challenge.height for b in self.heads]):
            self.heads.append(new_block_foliage)
            self.heads = sorted(self.heads, key=lambda b: b.challenge.height)[1:4]
            return True

        return False

    def block_can_be_added(self, new_block_header: BlockHeader, new_block_body: BlockBody):
        # new_block_header.data.previous_header_hash
        # hashes: List[bytes32] = [sha256(h.header.data).digest() for h in self.heads]
        # if new_block_header.data.previous_header_hash not in hashes:
        #     return False

        # TODO: validate everything
        return True
