[{"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/PlotStatus.tsx":"1","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/WalletAdd.tsx":"2","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Table/Table.tsx":"3","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/theme/dark.ts":"4","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/mnemonic.ts":"5","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/backup.ts":"6","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/dialog.tsx":"7","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/selectKey/SelectKey.tsx":"8","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmYourHarvesterNetwork.tsx":"9","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/standard/WalletStandard.tsx":"10","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmFullNodeConnections.tsx":"11","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/hooks/useLocale.ts":"12","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/layout/LayoutLoading.tsx":"13","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/WalletImport.tsx":"14","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/constants/style.ts":"15","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/trading/TradeManager.tsx":"16","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/hooks/useSelectFile.tsx":"17","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/overview/PlotOverviewHero.tsx":"18","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/trading/TradesTable.tsx":"19","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/PlotAddDirectoryDialog.tsx":"20","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/card/FarmCardFeesReward.tsx":"21","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/card/FarmCardStatus.tsx":"22","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmerStatus.tsx":"23","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Spinner/Spinner.tsx":"24","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/ModalDialogs/ModalDialogs.tsx":"25","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/GuestRoute/GuestRoute.tsx":"26","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/ConfirmDialog/ConfirmDialog.tsx":"27","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Accordion/Accordion.tsx":"28","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/theme/light.ts":"29"},{"size":1143,"mtime":1606138201984,"results":"30","hashOfConfig":"31"},{"size":2957,"mtime":1606139798780,"results":"32","hashOfConfig":"31"},{"size":5320,"mtime":1606139499819,"results":"33","hashOfConfig":"31"},{"size":244,"mtime":1605542228336,"results":"34","hashOfConfig":"31"},{"size":1124,"mtime":1606127043423,"results":"35","hashOfConfig":"31"},{"size":1392,"mtime":1605542228328,"results":"36","hashOfConfig":"31"},{"size":1918,"mtime":1606130082780,"results":"37","hashOfConfig":"31"},{"size":7040,"mtime":1606130191369,"results":"38","hashOfConfig":"31"},{"size":3082,"mtime":1605811971608,"results":"39","hashOfConfig":"31"},{"size":24748,"mtime":1606130891011,"results":"40","hashOfConfig":"31"},{"size":3123,"mtime":1606139062160,"results":"41","hashOfConfig":"31"},{"size":361,"mtime":1605542228323,"results":"42","hashOfConfig":"31"},{"size":489,"mtime":1606131522853,"results":"43","hashOfConfig":"31"},{"size":4043,"mtime":1606137438275,"results":"44","hashOfConfig":"31"},{"size":2332,"mtime":1605811969357,"results":"45","hashOfConfig":"31"},{"size":2495,"mtime":1605811971523,"results":"46","hashOfConfig":"31"},{"size":781,"mtime":1606131807589,"results":"47","hashOfConfig":"31"},{"size":1749,"mtime":1605811970689,"results":"48","hashOfConfig":"31"},{"size":1370,"mtime":1606130726496,"results":"49","hashOfConfig":"31"},{"size":3108,"mtime":1606125666202,"results":"50","hashOfConfig":"31"},{"size":863,"mtime":1605811970707,"results":"51","hashOfConfig":"31"},{"size":325,"mtime":1605811970274,"results":"52","hashOfConfig":"31"},{"size":1376,"mtime":1605811971108,"results":"53","hashOfConfig":"31"},{"size":307,"mtime":1605811970158,"results":"54","hashOfConfig":"31"},{"size":667,"mtime":1606137842752,"results":"55","hashOfConfig":"31"},{"size":466,"mtime":1605811970065,"results":"56","hashOfConfig":"31"},{"size":1605,"mtime":1606126602130,"results":"57","hashOfConfig":"31"},{"size":597,"mtime":1606126469055,"results":"58","hashOfConfig":"31"},{"size":179,"mtime":1605542228337,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gou9n3",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/PlotStatus.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/WalletAdd.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Table/Table.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/theme/dark.ts",[],["122","123","124","125","126","127","128"],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/mnemonic.ts",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/backup.ts",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/modules/dialog.tsx",[],["129","130","131","132","133","134","135"],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/selectKey/SelectKey.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmYourHarvesterNetwork.tsx",["136"],"import React from 'react';\nimport { Trans } from '@lingui/macro';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport {\n  Typography,\n  Tooltip,\n  IconButton,\n} from '@material-ui/core';\nimport { Delete as DeleteIcon } from '@material-ui/icons';\nimport {\n  Flex,\n  Table,\n  TooltipIcon,\n  FormatBytes,\n  FormatConnectionStatus,\n  Card,\n} from '@chia/core';\nimport Connection from '../../types/Connection';\nimport type { RootState } from '../../modules/rootReducer';\nimport FarmCloseConnection from './FarmCloseConnection';\n\nconst StyledIconButton = styled(IconButton)`\n  padding: 0.2rem;\n`;\n\nconst cols = [\n  {\n    minWidth: '200px',\n    field(row: Connection) {\n      return (\n        <Tooltip title={row.node_id}>\n          <span>{row.node_id}</span>\n        </Tooltip>\n      );\n    },\n    title: <Trans id=\"FarmFullNodeConnections.nodeId\">Node Id</Trans>,\n  },\n  {\n    width: '150px',\n    field: 'peer_host',\n    title: <Trans id=\"FarmFullNodeConnections.hostName\">Host Name</Trans>,\n  },\n  {\n    width: '150px',\n    field(row: Connection) {\n      return `${row.peer_port}/${row.peer_server_port}`;\n    },\n    title: <Trans id=\"FarmFullNodeConnections.port\">Port</Trans>,\n  },\n  {\n    width: '200px',\n    field(row: Connection) {\n      return (\n        <>\n          <FormatBytes value={row.bytes_written} />\n          /\n          <FormatBytes value={row.bytes_read} />\n        </>\n      );\n    },\n    title: <Trans id=\"FarmFullNodeConnections.upDown\">Up/Down</Trans>,\n  },\n  {\n    width: '100px',\n    title: <Trans id=\"FarmFullNodeConnections.actions\">Actions</Trans>,\n    field(row: Connection) {\n      return (\n        <FarmCloseConnection nodeId={row.node_id}>\n          {({ onClose }) => (\n            <StyledIconButton onClick={() => onClose()}>\n              <DeleteIcon />\n            </StyledIconButton>\n          )}\n        </FarmCloseConnection>\n      );\n    },\n  },\n];\n\nexport default function FarmYourHarvesterNetwork() {\n  const connections = useSelector((state: RootState) =>\n    state.farming_state.farmer.connections.filter(\n      (connection) => connection.type === 2,\n    ),\n  );\n\n  const connected = useSelector(\n    (state: RootState) => state.daemon_state.harvester_connected,\n  );\n\n  return (\n    <Card\n      gap={1}\n      title={(\n        <Trans id=\"FarmYourHarvesterNetwork.title\">\n          Your Harvester Network\n        </Trans>\n      )}\n      tooltip={(\n        <Trans id=\"FarmFullNodeConnections.description\">\n          A harvester is a service running on a machine where plot(s) are\n          actually stored. View your network of connected harvesters below\n          Learn more\n        </Trans>\n      )}\n      interactive\n    >\n      <Flex justifyContent=\"flex-end\" gap={1}>\n        <Typography variant=\"caption\" color=\"textSecondary\">\n          <Trans id=\"FarmFullNodeConnections.connectionStatus\">\n            Connection Status:\n          </Trans>\n        </Typography>\n        <FormatConnectionStatus connected={connected} />\n      </Flex>\n\n      <Table cols={cols} rows={connections} />\n    </Card>\n  );\n}\n","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/standard/WalletStandard.tsx",["137"],"import React, { ReactNode } from 'react';\nimport { Trans } from '@lingui/macro';\nimport Grid from '@material-ui/core/Grid';\nimport { AlertDialog } from '@chia/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Tooltip,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Box,\n  Paper,\n  Typography,\n  Button,\n  TextField,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from '@material-ui/core';\nimport {\n  ExpandMore as ExpandMoreIcon,\n  Help as HelpIcon,\n} from '@material-ui/icons';\nimport {\n  get_address,\n  send_transaction,\n  farm_block,\n} from '../../../modules/message';\nimport { mojo_to_chia_string, chia_to_mojo } from '../../../util/chia';\nimport { unix_to_short_date } from '../../../util/utils';\nimport { openDialog } from '../../../modules/dialog';\nimport { get_transaction_result } from '../../../util/transaction_result';\nimport config from '../../../config/config';\nimport type { RootState } from '../../../modules/rootReducer';\nimport Transaction from '../../../types/Transaction';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  front: {\n    zIndex: 100,\n  },\n  resultSuccess: {\n    color: '#3AAC59',\n  },\n  resultFailure: {\n    color: 'red',\n  },\n  root: {\n    display: 'flex',\n    paddingLeft: '0px',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(0),\n    paddingBottom: theme.spacing(0),\n    paddingRight: theme.spacing(0),\n  },\n  paper: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  drawerWallet: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    height: '100%',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  sendCard: {\n    marginTop: theme.spacing(2),\n  },\n  sendButton: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    width: 150,\n    height: 50,\n  },\n  copyButton: {\n    marginTop: theme.spacing(0),\n    marginBottom: theme.spacing(0),\n    width: 50,\n    height: 56,\n  },\n  cardTitle: {\n    paddingLeft: theme.spacing(1),\n    paddingTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  cardSubSection: {\n    paddingLeft: theme.spacing(3),\n    paddingRight: theme.spacing(3),\n    paddingTop: theme.spacing(1),\n  },\n  walletContainer: {\n    marginBottom: theme.spacing(5),\n  },\n  table_root: {\n    width: '100%',\n    maxHeight: 600,\n    overflowY: 'scroll',\n  },\n  table: {\n    height: '100%',\n    overflowY: 'scroll',\n  },\n  tableBody: {\n    height: '100%',\n    overflowY: 'scroll',\n  },\n  row: {\n    width: 700,\n  },\n  cell_short: {\n    fontSize: '14px',\n    width: 50,\n    overflowWrap: 'break-word' /* Renamed property in CSS3 draft spec */,\n  },\n  amountField: {\n    paddingRight: 20,\n  },\n}));\n\ntype BalanceCardSubSectionProps = {\n  title: ReactNode;\n  tooltip?: ReactNode;\n  balance: number;\n};\n\nfunction BalanceCardSubSection(props: BalanceCardSubSectionProps) {\n  const classes = useStyles();\n\n  return (\n    <Grid item xs={12}>\n      <div className={classes.cardSubSection}>\n        <Box display=\"flex\">\n          <Box flexGrow={1}>\n            <Typography variant=\"subtitle1\">\n              {props.title}\n              {props.tooltip && (\n                <Tooltip title={props.tooltip}>\n                  <HelpIcon style={{ color: '#c8c8c8', fontSize: 12 }} />\n                </Tooltip>\n              )}\n            </Typography>\n          </Box>\n          <Box>\n            <Typography variant=\"subtitle1\">\n              {mojo_to_chia_string(props.balance)} TXCH\n            </Typography>\n          </Box>\n        </Box>\n      </div>\n    </Grid>\n  );\n}\n\ntype BalanceCardProps = {\n  wallet_id: number;\n};\n\nfunction BalanceCard(props: BalanceCardProps) {\n  const id = props.wallet_id;\n  const balance = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].balance_total,\n  );\n  const balance_spendable = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].balance_spendable,\n  );\n  const balance_pending = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].balance_pending,\n  );\n  const balance_frozen = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].balance_frozen,\n  );\n  const balance_change = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].balance_change,\n  );\n  const balance_ptotal = balance + balance_pending;\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.paper}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <div className={classes.cardTitle}>\n            <Typography component=\"h6\" variant=\"h6\">\n              <Trans id=\"BalanceCard.balance\">Balance</Trans>\n            </Typography>\n          </div>\n        </Grid>\n        <BalanceCardSubSection\n          title={<Trans id=\"BalanceCard.totalBalance\">Total Balance</Trans>}\n          balance={balance}\n          tooltip={\n            <Trans id=\"BalanceCard.totalBalanceTooltip\">\n              This is the total amount of Chia in the blockchain at the LCA\n              block (latest common ancestor) that is controlled by your private\n              keys. It includes frozen farming rewards, but not pending incoming\n              and outgoing transactions.\n            </Trans>\n          }\n        />\n        <BalanceCardSubSection\n          title={\n            <Trans id=\"BalanceCard.spendableBalance\">Spendable Balance</Trans>\n          }\n          balance={balance_spendable}\n          tooltip={\n            <Trans id=\"BalanceCard.spendableBalanceTooltip\">\n              This is the amount of Chia that you can currently use to make\n              transactions. It does not include pending farming rewards, pending\n              incoming transctions, and Chia that you have just spent but is not\n              yet in the blockchain.\n            </Trans>\n          }\n        />\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={1}>\n                <Accordion className={classes.front}>\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                  >\n                    <Typography className={classes.heading}>\n                      <Trans id=\"BalanceCard.viewPendingBalances\">\n                        View pending balances\n                      </Trans>\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <Grid container spacing={0}>\n                      <BalanceCardSubSection\n                        title={\n                          <Trans id=\"BalanceCard.pendingTotalBalance\">\n                            Pending Total Balance\n                          </Trans>\n                        }\n                        balance={balance_ptotal}\n                        tooltip={\n                          <Trans id=\"BalanceCard.pendingTotalBalanceTooltip\">\n                            This is the total balance + pending balance: it it\n                            what your balance will be after all pending\n                            transactions are confirmed.\n                          </Trans>\n                        }\n                      />\n                      <BalanceCardSubSection\n                        title={\n                          <Trans id=\"BalanceCard.pendingBalance\">\n                            Pending Balance\n                          </Trans>\n                        }\n                        balance={balance_pending}\n                        tooltip={\n                          <Trans id=\"BalanceCard.pendingBalanceTooltip\">\n                            This is the sum of the incoming and outgoing pending\n                            transactions (not yet included into the blockchain).\n                            This does not include farming rewards.\n                          </Trans>\n                        }\n                      />\n                      <BalanceCardSubSection\n                        title={\n                          <Trans id=\"BalanceCard.pendingFarmingRewards\">\n                            Pending Farming Rewards\n                          </Trans>\n                        }\n                        balance={balance_frozen}\n                        tooltip={\n                          <Trans id=\"BalanceCard.pendingFarmingRewardsTooltip\">\n                            This is the total amount of farming rewards farmed\n                            recently, that have been confirmed but are not yet\n                            spendable. Farming rewards are frozen for 200\n                            blocks.\n                          </Trans>\n                        }\n                      />\n                      <BalanceCardSubSection\n                        title={\n                          <Trans id=\"BalanceCard.pendingChange\">\n                            Pending Change\n                          </Trans>\n                        }\n                        balance={balance_change}\n                        tooltip={\n                          <Trans id=\"BalanceCard.pendingChangeTooltip\">\n                            This is the pending change, which are change coins\n                            which you have sent to yourself, but have not been\n                            confirmed yet.\n                          </Trans>\n                        }\n                      />\n                    </Grid>\n                  </AccordionDetails>\n                </Accordion>\n              </Box>\n            </Box>\n          </div>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\ntype SendCardProps = {\n  wallet_id: number;\n};\n\nfunction SendCard(props: SendCardProps) {\n  const id = props.wallet_id;\n  const classes = useStyles();\n  let address_input: HTMLInputElement;\n  let amount_input: HTMLInputElement;\n  let fee_input: HTMLInputElement;\n  const dispatch = useDispatch();\n\n  const sending_transaction = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].sending_transaction,\n  );\n\n  const send_transaction_result = useSelector(\n    (state: RootState) =>\n      state.wallet_state.wallets[id].send_transaction_result,\n  );\n  const syncing = useSelector(\n    (state: RootState) => state.wallet_state.status.syncing,\n  );\n\n  const result = get_transaction_result(send_transaction_result);\n  const result_message = result.message;\n  const result_class = result.success\n    ? classes.resultSuccess\n    : classes.resultFailure;\n\n  function farm() {\n    const address = address_input.value;\n    if (address !== '') {\n      dispatch(farm_block(address));\n    }\n  }\n\n  function send() {\n    if (sending_transaction) {\n      return;\n    }\n    if (syncing) {\n      dispatch(\n        openDialog(\n          <AlertDialog>\n            <Trans id=\"SendCard.finishSyncingBeforeTransaction\">\n              Please finish syncing before making a transaction\n            </Trans>\n          </AlertDialog>\n        ),\n      );\n      return;\n    }\n\n    let address = address_input.value.trim();\n    if (\n      amount_input.value === '' ||\n      Number(amount_input.value) === 0 ||\n      !Number(amount_input.value) ||\n      Number.isNaN(Number(amount_input.value))\n    ) {\n      dispatch(\n        openDialog(\n          <AlertDialog>\n            <Trans id=\"SendCard.enterValidAmount\">\n              Please enter a valid numeric amount\n            </Trans>\n          </AlertDialog>\n        ),\n      );\n      return;\n    }\n    if (fee_input.value === '' || Number.isNaN(Number(fee_input.value))) {\n      dispatch(\n        openDialog(\n          <AlertDialog>\n            <Trans id=\"SendCard.enterValidFee\">\n              Please enter a valid numeric fee\n            </Trans>\n          </AlertDialog>\n        ),\n      );\n      return;\n    }\n    const amount = chia_to_mojo(amount_input.value);\n    const fee = chia_to_mojo(fee_input.value);\n\n    if (address.includes('colour')) {\n      dispatch(\n        openDialog(\n          <AlertDialog>\n            <Trans id=\"SendCard.enterValidAddress\">\n              Error: Cannot send chia to coloured address. Please enter a chia\n              address.\n            </Trans>\n          </AlertDialog>\n        ),\n      );\n      return;\n    }\n    if (address.slice(0, 12) === 'chia_addr://') {\n      address = address.slice(12);\n    }\n    if (address.startsWith('0x') || address.startsWith('0X')) {\n      address = address.slice(2);\n    }\n\n    const amount_value = Number.parseFloat(amount);\n    const fee_value = Number.parseFloat(fee);\n\n    dispatch(send_transaction(id, amount_value, fee_value, address));\n    address_input.value = '';\n    amount_input.value = '';\n    fee_input.value = '';\n  }\n\n  return (\n    <Paper className={classes.paper}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <div className={classes.cardTitle}>\n            <Typography component=\"h6\" variant=\"h6\">\n              <Trans id=\"SendCard.title\">Create Transaction</Trans>\n            </Typography>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <p className={result_class}>{result_message}</p>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={1}>\n                <TextField\n                  id=\"filled-secondary\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  fullWidth\n                  disabled={sending_transaction}\n                  inputRef={(input) => {\n                    address_input = input;\n                  }}\n                  label={\n                    <Trans id=\"SendCard.address\">Address / Puzzle hash</Trans>\n                  }\n                />\n              </Box>\n              <Box />\n            </Box>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={6}>\n                <TextField\n                  id=\"filled-secondary\"\n                  variant=\"filled\"\n                  color=\"secondary\"\n                  fullWidth\n                  disabled={sending_transaction}\n                  className={classes.amountField}\n                  margin=\"normal\"\n                  inputRef={(input) => {\n                    amount_input = input;\n                  }}\n                  label={<Trans id=\"SendCard.amount\">Amount</Trans>}\n                />\n              </Box>\n              <Box flexGrow={6}>\n                <TextField\n                  id=\"filled-secondary\"\n                  variant=\"filled\"\n                  fullWidth\n                  color=\"secondary\"\n                  margin=\"normal\"\n                  disabled={sending_transaction}\n                  inputRef={(input) => {\n                    fee_input = input;\n                  }}\n                  label={<Trans id=\"SendCard.fee\">Fee</Trans>}\n                />\n              </Box>\n            </Box>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={1}>\n                <Button\n                  onClick={farm}\n                  className={classes.sendButton}\n                  style={config.local_test ? {} : { visibility: 'hidden' }}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  <Trans id=\"SendCard.farm\">Farm</Trans>\n                </Button>\n              </Box>\n              <Box>\n                <Button\n                  onClick={send}\n                  className={classes.sendButton}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={sending_transaction}\n                >\n                  <Trans id=\"SendCard.send\">Send</Trans>\n                </Button>\n              </Box>\n            </Box>\n          </div>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\ntype HistoryCardProps = {\n  wallet_id: number;\n};\n\nfunction HistoryCard(props: HistoryCardProps) {\n  const id = props.wallet_id;\n  const classes = useStyles();\n  return (\n    <Paper className={classes.paper}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <div className={classes.cardTitle}>\n            <Typography component=\"h6\" variant=\"h6\">\n              <Trans id=\"HistoryCard.title\">History</Trans>\n            </Typography>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <TransactionTable wallet_id={id} />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\ntype TransactionTableProps = {\n  wallet_id: number;\n};\n\nfunction TransactionTable(props: TransactionTableProps) {\n  const classes = useStyles();\n  const id = props.wallet_id;\n  const transactions = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].transactions,\n  );\n\n  if (transactions.length === 0) {\n    return <div style={{ margin: '30px' }}>No previous transactions</div>;\n  }\n\n  const incoming_string = (incoming: boolean) => {\n    if (incoming) {\n      return <Trans id=\"TransactionTable.incoming\">Incoming</Trans>;\n    }\n    return <Trans id=\"TransactionTable.outgoing\">Outgoing</Trans>;\n  };\n  const confirmed_to_string = (tx: Transaction) => {\n    return tx.confirmed ? (\n      <Trans id=\"TransactionTable.confirmedAtHeight\">\n        Confirmed at height {tx.confirmed_at_index}\n      </Trans>\n    ) : (\n      <Trans id=\"TransactionTable.pending\">Pending</Trans>\n    );\n  };\n\n  return (\n    <Paper className={classes.table_root}>\n      <Table stickyHeader className={classes.table}>\n        <TableHead>\n          <TableRow className={classes.row}>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.type\">Type</Trans>\n            </TableCell>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.to\">To</Trans>\n            </TableCell>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.date\">Date</Trans>\n            </TableCell>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.status\">Status</Trans>\n            </TableCell>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.amount\">Amount</Trans>\n            </TableCell>\n            <TableCell className={classes.cell_short}>\n              <Trans id=\"TransactionTable.fee\">Fee</Trans>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody className={classes.tableBody}>\n          {transactions.map((tx) => (\n            <TableRow\n              className={classes.row}\n              key={\n                tx.to_address +\n                tx.created_at_time +\n                tx.amount +\n                // @ts-ignore\n                (tx.removals.length > 0 ? tx.removals[0].parent_coin_info : '')\n              }\n            >\n              <TableCell className={classes.cell_short}>\n                {incoming_string(tx.incoming)}\n              </TableCell>\n              <TableCell\n                style={{ maxWidth: '150px' }}\n                className={classes.cell_short}\n              >\n                {tx.to_address}\n              </TableCell>\n              <TableCell className={classes.cell_short}>\n                {unix_to_short_date(tx.created_at_time)}\n              </TableCell>\n              <TableCell className={classes.cell_short}>\n                {confirmed_to_string(tx)}\n              </TableCell>\n              <TableCell className={classes.cell_short}>\n                {mojo_to_chia_string(tx.amount)}\n              </TableCell>\n              <TableCell className={classes.cell_short}>\n                {mojo_to_chia_string(tx.fee_amount)}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}\n\ntype AddressCardProps = {\n  wallet_id: number;\n};\n\nfunction AddressCard(props: AddressCardProps) {\n  const id = props.wallet_id;\n  const address = useSelector(\n    (state: RootState) => state.wallet_state.wallets[id].address,\n  );\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  function newAddress() {\n    dispatch(get_address(id));\n  }\n\n  function copy() {\n    navigator.clipboard.writeText(address);\n  }\n\n  return (\n    <Paper className={classes.paper}>\n      <Grid container spacing={0}>\n        <Grid item xs={12}>\n          <div className={classes.cardTitle}>\n            <Typography component=\"h6\" variant=\"h6\">\n              <Trans id=\"AddressCard.title\">Receive Address</Trans>\n            </Typography>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={1}>\n                <TextField\n                  disabled\n                  fullWidth\n                  label={<Trans id=\"AddressCard.address\">Address</Trans>}\n                  value={address}\n                  variant=\"outlined\"\n                />\n              </Box>\n              <Box>\n                <Button\n                  onClick={copy}\n                  className={classes.copyButton}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  disableElevation\n                >\n                  <Trans id=\"AddressCard.copy\">Copy</Trans>\n                </Button>\n              </Box>\n            </Box>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.cardSubSection}>\n            <Box display=\"flex\">\n              <Box flexGrow={1} />\n              <Box>\n                <Button\n                  onClick={newAddress}\n                  className={classes.sendButton}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  <Trans id=\"AddressCard.newAddress\">New Address</Trans>\n                </Button>\n              </Box>\n            </Box>\n          </div>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n\ntype StandardWalletProps = {\n  wallet_id: number;\n};\n\nexport default function StandardWallet(props: StandardWalletProps) {\n  const classes = useStyles();\n  const id = props.wallet_id;\n  const wallets = useSelector((state: RootState) => state.wallet_state.wallets);\n\n  if (wallets.length > props.wallet_id) {\n    return (\n      <Grid className={classes.walletContainer} item xs={12}>\n        <BalanceCard wallet_id={id} />\n        <SendCard wallet_id={id} />\n        <AddressCard wallet_id={id} />\n        <HistoryCard wallet_id={id} />\n      </Grid>\n    );\n  }\n\n  return null;\n}\n","/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmFullNodeConnections.tsx",["138"],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/hooks/useLocale.ts",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/layout/LayoutLoading.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/wallet/WalletImport.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/constants/style.ts",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/trading/TradeManager.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/hooks/useSelectFile.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/overview/PlotOverviewHero.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/trading/TradesTable.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/plot/PlotAddDirectoryDialog.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/card/FarmCardFeesReward.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/card/FarmCardStatus.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/farm/FarmerStatus.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Spinner/Spinner.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/ModalDialogs/ModalDialogs.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/GuestRoute/GuestRoute.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/ConfirmDialog/ConfirmDialog.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/components/core/Accordion/Accordion.tsx",[],"/Users/seeden/Documents/git/chia-blockchain/electron-react/src/theme/light.ts",[],{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"139","replacedBy":"153"},{"ruleId":"141","replacedBy":"154"},{"ruleId":"143","replacedBy":"155"},{"ruleId":"145","replacedBy":"156"},{"ruleId":"147","replacedBy":"157"},{"ruleId":"149","replacedBy":"158"},{"ruleId":"151","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":14,"column":3,"nodeType":"162","messageId":"163","endLine":14,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":623,"column":12,"nodeType":"166","messageId":"167","endLine":623,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":11,"column":3,"nodeType":"162","messageId":"163","endLine":11,"endColumn":14},"jest/no-try-expect",["168"],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["169"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],["168"],[],["169"],[],[],[],[],"@typescript-eslint/no-unused-vars","'TooltipIcon' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-use-before-define","'TransactionTable' was used before it was defined.","JSXIdentifier","noUseBeforeDefine","no-conditional-expect","padding-line-between-statements"]