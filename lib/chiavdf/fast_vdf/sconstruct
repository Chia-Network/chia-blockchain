import gch

ccflags=' -O0'
#ccflags=' -O3'

ccflags = '-D VDF_MODE=1 -D ENABLE_ALL_INSTRUCTIONS=0 -no-pie -march=native' + ccflags

env.Append(
    CCFLAGS=ccflags,
    LINKFLAGS= '-no-pie',
    LIBS=['gmpxx', 'gmp', 'flint', 'pthread']
);

gch.generate(env);

env['precompiled_header']=File('include.h');
env['Gch']=env.Gch(target='include.h.gch', source=env['precompiled_header']);

#env.Program('gcd_test.cpp');
#env.Program('vdf.cpp');

env.Program( 'compile_asm', 'compile_asm.cpp', CCFLAGS = ccflags + ' -O0' );
env.Command( 'asm_compiled.s', 'compile_asm', "./compile_asm" );
env.Program( 'vdf', [ 'vdf.cpp', 'asm_compiled.s' ] );