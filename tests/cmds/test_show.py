from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

from chia.types.blockchain_format.sized_bytes import bytes32
from chia.types.full_block import FullBlock
from chia.util.byte_types import hexstr_to_bytes
from tests.cmds.cmd_test_utils import TestFullNodeRpcClient, TestRpcClients, cli_assert_shortcut, run_cli_command
from tests.cmds.testing_classes import height_hash

BASE_LIST = ["show"]

full_block_bytes = hexstr_to_bytes(
    ""  # noqa: E501
)


@dataclass
class ShowFullNodeRpcClient(TestFullNodeRpcClient):
    async def get_fee_estimate(self, target_times: Optional[List[int]], cost: Optional[int]) -> Dict[str, Any]:
        response: Dict[str, Any] = {
            "current_fee_rate": 0,
            "estimates": [0, 0, 0],
            "fee_rate_last_block": 30769.681426718744,
            "fees_last_block": 500000000000,
            "full_node_synced": True,
            "last_block_cost": 16249762,
            "last_peak_timestamp": 1688858763,
            "last_tx_block_height": 32,
            "mempool_fees": 0,
            "mempool_max_size": 0,
            "mempool_size": 0,
            "node_time_utc": 1689187617,
            "num_spends": 0,
            "peak_height": 32,
            "success": True,
            "target_times": target_times,
        }
        self.rpc_log["get_fee_estimate"] = (target_times, cost)
        return response

    async def get_block(self, header_hash: bytes32) -> Optional[FullBlock]:
        # we return a block with height 2
        self.rpc_log["get_block"] = (header_hash,)
        return FullBlock.from_bytes(full_block_bytes)


RPC_CLIENT_TO_USE = ShowFullNodeRpcClient()  # pylint: disable=no-value-for-parameter


def test_chia_show(capsys: Any, get_test_cli_clients: Tuple[TestRpcClients, Path]) -> None:
    test_rpc_clients, root_dir = get_test_cli_clients
    # set RPC Client
    test_rpc_clients.full_node_rpc_client = RPC_CLIENT_TO_USE
    # get output with all options
    command_args = ["-s", "-f", "-bh 1", "-b 0000000000000000000000000000000000000000000000000000000000000002"]
    success, output = run_cli_command(capsys, root_dir, BASE_LIST + command_args)
    assert success
    # these are various things that should be in the output
    assert_list = [
        "Current Blockchain Status: Full Node Synced",
        "Estimated network space: 25.647 EiB",
        "Block fees: 500000000000 mojos",
        "Fee rate:    3.077e+04 mojos per CLVM cost",
        "Tx Filter Hash         b27a3acd8736fdb7288dc29d28df4183dda259e0e067bcdb35f4ac500bebf661",
    ]
    cli_assert_shortcut(output, assert_list)
    expected_calls: dict[str, Optional[tuple[Any, ...]]] = {  # name of rpc: (args)
        "get_blockchain_state": None,
        "get_block_record": (height_hash(1),),
        "get_fee_estimate": ([60, 120, 300], 1),
        "get_block": (height_hash(2),),
    }  # these RPC's should be called with these variables.
    test_rpc_clients.full_node_rpc_client.check_log(expected_calls)
